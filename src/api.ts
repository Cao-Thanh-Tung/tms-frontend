/* tslint:disable */
/* eslint-disable */
/**
 * TMS API
 * TMS API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddressDTO
 */
export interface AddressDTO {
    /**
     * 
     * @type {number}
     * @memberof AddressDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressDTO
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDTO
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDTO
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDTO
     */
    'streetNo'?: string;
    /**
     * 
     * @type {number}
     * @memberof AddressDTO
     */
    'provinceId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AddressDTO
     */
    'districtId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AddressDTO
     */
    'communeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AddressDTO
     */
    'positionId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AddressDTO
     */
    'relativePositionId'?: number;
}
/**
 * 
 * @export
 * @interface AdminUserDTO
 */
export interface AdminUserDTO {
    /**
     * 
     * @type {number}
     * @memberof AdminUserDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdminUserDTO
     */
    'login': string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserDTO
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserDTO
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserDTO
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUserDTO
     */
    'activated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdminUserDTO
     */
    'langKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserDTO
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserDTO
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserDTO
     */
    'lastModifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserDTO
     */
    'lastModifiedDate'?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof AdminUserDTO
     */
    'authorities'?: Set<string>;
}
/**
 * 
 * @export
 * @interface CommuneDTO
 */
export interface CommuneDTO {
    /**
     * 
     * @type {number}
     * @memberof CommuneDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CommuneDTO
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CommuneDTO
     */
    'districtId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CommuneDTO
     */
    'centerPosId'?: number;
}
/**
 * 
 * @export
 * @interface ContractorDTO
 */
export interface ContractorDTO {
    /**
     * 
     * @type {number}
     * @memberof ContractorDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ContractorDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractorDTO
     */
    'signingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractorDTO
     */
    'expirationDate'?: string;
    /**
     * 
     * @type {AddressDTO}
     * @memberof ContractorDTO
     */
    'address'?: AddressDTO;
}
/**
 * 
 * @export
 * @interface CustomerAssignmentDTO
 */
export interface CustomerAssignmentDTO {
    /**
     * 
     * @type {number}
     * @memberof CustomerAssignmentDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomerAssignmentDTO
     */
    'customerUserXId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomerAssignmentDTO
     */
    'employeeUserXId'?: number;
}
/**
 * 
 * @export
 * @interface DistanceMatrixDTO
 */
export interface DistanceMatrixDTO {
    /**
     * 
     * @type {number}
     * @memberof DistanceMatrixDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DistanceMatrixDTO
     */
    'distance'?: number;
    /**
     * 
     * @type {number}
     * @memberof DistanceMatrixDTO
     */
    'time'?: number;
    /**
     * 
     * @type {number}
     * @memberof DistanceMatrixDTO
     */
    'fromPosId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DistanceMatrixDTO
     */
    'toPosId'?: number;
}
/**
 * 
 * @export
 * @interface DistrictDTO
 */
export interface DistrictDTO {
    /**
     * 
     * @type {number}
     * @memberof DistrictDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DistrictDTO
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof DistrictDTO
     */
    'provinceId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DistrictDTO
     */
    'centerPosId'?: number;
}
/**
 * 
 * @export
 * @interface JWTToken
 */
export interface JWTToken {
    /**
     * 
     * @type {string}
     * @memberof JWTToken
     */
    'id_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof JWTToken
     */
    'refresh_token'?: string;
}
/**
 * 
 * @export
 * @interface KeyAndPasswordVM
 */
export interface KeyAndPasswordVM {
    /**
     * 
     * @type {string}
     * @memberof KeyAndPasswordVM
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof KeyAndPasswordVM
     */
    'newPassword'?: string;
}
/**
 * 
 * @export
 * @interface LoginVM
 */
export interface LoginVM {
    /**
     * 
     * @type {string}
     * @memberof LoginVM
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginVM
     */
    'password': string;
    /**
     * 
     * @type {boolean}
     * @memberof LoginVM
     */
    'rememberMe'?: boolean;
}
/**
 * 
 * @export
 * @interface ManagedUserVM
 */
export interface ManagedUserVM {
    /**
     * 
     * @type {number}
     * @memberof ManagedUserVM
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    'login': string;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ManagedUserVM
     */
    'activated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    'langKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    'lastModifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    'lastModifiedDate'?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof ManagedUserVM
     */
    'authorities'?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof ManagedUserVM
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface ManualSolutionDTO
 */
export interface ManualSolutionDTO {
    /**
     * 
     * @type {boolean}
     * @memberof ManualSolutionDTO
     */
    'finalSolution'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ManualSolutionDTO
     */
    'numVehicleUsed'?: number;
    /**
     * 
     * @type {number}
     * @memberof ManualSolutionDTO
     */
    'totalKm'?: number;
    /**
     * 
     * @type {number}
     * @memberof ManualSolutionDTO
     */
    'totalGoodKg'?: number;
    /**
     * 
     * @type {number}
     * @memberof ManualSolutionDTO
     */
    'totalConstraint'?: number;
    /**
     * 
     * @type {number}
     * @memberof ManualSolutionDTO
     */
    'numViolationTrip'?: number;
    /**
     * 
     * @type {string}
     * @memberof ManualSolutionDTO
     */
    'latestTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManualSolutionDTO
     */
    'error'?: string;
    /**
     * 
     * @type {Array<TripDTO>}
     * @memberof ManualSolutionDTO
     */
    'trips'?: Array<TripDTO>;
    /**
     * 
     * @type {Array<UnplannedOrderDTO>}
     * @memberof ManualSolutionDTO
     */
    'unplannedOrders'?: Array<UnplannedOrderDTO>;
}
/**
 * 
 * @export
 * @interface OrderDTO
 */
export interface OrderDTO {
    /**
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    'cost'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    'goodType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrderDTO
     */
    'immediateDelivery'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    'weight'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    'volume'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    'status'?: string;
    /**
     * 
     * @type {UserXDTO}
     * @memberof OrderDTO
     */
    'customer'?: UserXDTO;
}
/**
 * 
 * @export
 * @interface OrderItemDTO
 */
export interface OrderItemDTO {
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDTO
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDTO
     */
    'goodType'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'weight'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'volume'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'numPallets'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'length'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDTO
     */
    'earliestTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDTO
     */
    'latestTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'waitingTimeSec'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'carryTimeSec'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDTO
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDTO
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'orderId'?: number;
    /**
     * 
     * @type {AddressDTO}
     * @memberof OrderItemDTO
     */
    'address'?: AddressDTO;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'addressId'?: number;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pageable
     */
    'sort'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PasswordChangeDTO
 */
export interface PasswordChangeDTO {
    /**
     * 
     * @type {string}
     * @memberof PasswordChangeDTO
     */
    'currentPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChangeDTO
     */
    'newPassword'?: string;
}
/**
 * 
 * @export
 * @interface PositionDTO
 */
export interface PositionDTO {
    /**
     * 
     * @type {number}
     * @memberof PositionDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PositionDTO
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof PositionDTO
     */
    'lng'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PositionDTO
     */
    'isRelative'?: boolean;
}
/**
 * 
 * @export
 * @interface ProvinceDTO
 */
export interface ProvinceDTO {
    /**
     * 
     * @type {number}
     * @memberof ProvinceDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProvinceDTO
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProvinceDTO
     */
    'centerPosId'?: number;
}
/**
 * 
 * @export
 * @interface ScheduleDTO
 */
export interface ScheduleDTO {
    /**
     * 
     * @type {number}
     * @memberof ScheduleDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDTO
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleDTO
     */
    'coordinatorUserXId'?: number;
}
/**
 * 
 * @export
 * @interface ScheduleInputDTO
 */
export interface ScheduleInputDTO {
    /**
     * 
     * @type {number}
     * @memberof ScheduleInputDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleInputDTO
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleInputDTO
     */
    'scheduleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleInputDTO
     */
    'inputSolutionId'?: number;
}
/**
 * 
 * @export
 * @interface ScheduleInputOrderDTO
 */
export interface ScheduleInputOrderDTO {
    /**
     * 
     * @type {number}
     * @memberof ScheduleInputOrderDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleInputOrderDTO
     */
    'scheduleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleInputOrderDTO
     */
    'scheduleInputId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleInputOrderDTO
     */
    'orderId'?: number;
}
/**
 * 
 * @export
 * @interface ScheduleInputVehicleDTO
 */
export interface ScheduleInputVehicleDTO {
    /**
     * 
     * @type {number}
     * @memberof ScheduleInputVehicleDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleInputVehicleDTO
     */
    'scheduleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleInputVehicleDTO
     */
    'scheduleInputId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleInputVehicleDTO
     */
    'vehicleId'?: number;
}
/**
 * 
 * @export
 * @interface SearchCriteria
 */
export interface SearchCriteria {
    /**
     * 
     * @type {string}
     * @memberof SearchCriteria
     */
    'attributeName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCriteria
     */
    'operator'?: string;
    /**
     * 
     * @type {object}
     * @memberof SearchCriteria
     */
    'value'?: any; //object 
}
/**
 * 
 * @export
 * @interface SolutionDTO
 */
export interface SolutionDTO {
    /**
     * 
     * @type {number}
     * @memberof SolutionDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SolutionDTO
     */
    'type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SolutionDTO
     */
    'finalSolution'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SolutionDTO
     */
    'scheduleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionDTO
     */
    'scheduleInputId'?: number;
}
/**
 * 
 * @export
 * @interface SolutionSummaryDTO
 */
export interface SolutionSummaryDTO {
    /**
     * 
     * @type {number}
     * @memberof SolutionSummaryDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionSummaryDTO
     */
    'numVehicleUsed'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionSummaryDTO
     */
    'totalKm'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionSummaryDTO
     */
    'totalGoodKg'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionSummaryDTO
     */
    'totalConstraint'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionSummaryDTO
     */
    'numViolationTrip'?: number;
    /**
     * 
     * @type {string}
     * @memberof SolutionSummaryDTO
     */
    'latestTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SolutionSummaryDTO
     */
    'error'?: string;
    /**
     * 
     * @type {number}
     * @memberof SolutionSummaryDTO
     */
    'solutionId'?: number;
}
/**
 * 
 * @export
 * @interface SolutionTripDTO
 */
export interface SolutionTripDTO {
    /**
     * 
     * @type {number}
     * @memberof SolutionTripDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SolutionTripDTO
     */
    'estimatedStartTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SolutionTripDTO
     */
    'estimatedEndTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripDTO
     */
    'totalLoadKg'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripDTO
     */
    'totalKm'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SolutionTripDTO
     */
    'isFinal'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripDTO
     */
    'solutionId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripDTO
     */
    'fromAddressId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripDTO
     */
    'toAddressId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripDTO
     */
    'vehicleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripDTO
     */
    'driverUserXId'?: number;
}
/**
 * 
 * @export
 * @interface SolutionTripOrderDTO
 */
export interface SolutionTripOrderDTO {
    /**
     * 
     * @type {number}
     * @memberof SolutionTripOrderDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripOrderDTO
     */
    'tripId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripOrderDTO
     */
    'orderId'?: number;
}
/**
 * 
 * @export
 * @interface SolutionTripStopPointDTO
 */
export interface SolutionTripStopPointDTO {
    /**
     * 
     * @type {number}
     * @memberof SolutionTripStopPointDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SolutionTripStopPointDTO
     */
    'estimatedArrivalTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SolutionTripStopPointDTO
     */
    'estimatedLeaveTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripStopPointDTO
     */
    'stopOrder'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripStopPointDTO
     */
    'tripId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripStopPointDTO
     */
    'stopPointAddressId'?: number;
}
/**
 * 
 * @export
 * @interface SolutionTripStopPointOrderDTO
 */
export interface SolutionTripStopPointOrderDTO {
    /**
     * 
     * @type {number}
     * @memberof SolutionTripStopPointOrderDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripStopPointOrderDTO
     */
    'tripStopPointId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionTripStopPointOrderDTO
     */
    'orderItemId'?: number;
}
/**
 * 
 * @export
 * @interface SolutionUnplannedOrderItemDTO
 */
export interface SolutionUnplannedOrderItemDTO {
    /**
     * 
     * @type {number}
     * @memberof SolutionUnplannedOrderItemDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SolutionUnplannedOrderItemDTO
     */
    'reason'?: string;
    /**
     * 
     * @type {number}
     * @memberof SolutionUnplannedOrderItemDTO
     */
    'solutionId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolutionUnplannedOrderItemDTO
     */
    'orderItemId'?: number;
}
/**
 * 
 * @export
 * @interface SolverConfigDTO
 */
export interface SolverConfigDTO {
    /**
     * 
     * @type {number}
     * @memberof SolverConfigDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SolverConfigDTO
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SolverConfigDTO
     */
    'endTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof SolverConfigDTO
     */
    'solveTimeLimitSec'?: number;
    /**
     * 
     * @type {string}
     * @memberof SolverConfigDTO
     */
    'strategy'?: string;
    /**
     * 
     * @type {number}
     * @memberof SolverConfigDTO
     */
    'scheduleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolverConfigDTO
     */
    'scheduleInputId'?: number;
}
/**
 * 
 * @export
 * @interface SolverInputDTO
 */
export interface SolverInputDTO {
    /**
     * 
     * @type {Array<number>}
     * @memberof SolverInputDTO
     */
    'orderIds'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof SolverInputDTO
     */
    'vehicleIds'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof SolverInputDTO
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SolverInputDTO
     */
    'endTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof SolverInputDTO
     */
    'solveTimeLimitSec'?: number;
    /**
     * 
     * @type {string}
     * @memberof SolverInputDTO
     */
    'strategy'?: string;
}
/**
 * 
 * @export
 * @interface SolverInputWithInitialDTO
 */
export interface SolverInputWithInitialDTO {
    /**
     * 
     * @type {SolverInputDTO}
     * @memberof SolverInputWithInitialDTO
     */
    'solverInputDTO'?: SolverInputDTO;
    /**
     * 
     * @type {ManualSolutionDTO}
     * @memberof SolverInputWithInitialDTO
     */
    'initialSolution'?: ManualSolutionDTO;
}
/**
 * 
 * @export
 * @interface SolverResultDTO
 */
export interface SolverResultDTO {
    /**
     * 
     * @type {number}
     * @memberof SolverResultDTO
     */
    'scheduleInputId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SolverResultDTO
     */
    'solutionId'?: number;
}
/**
 * 
 * @export
 * @interface StopPointDTO
 */
export interface StopPointDTO {
    /**
     * 
     * @type {string}
     * @memberof StopPointDTO
     */
    'estimatedArrivalTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof StopPointDTO
     */
    'estimatedLeaveTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof StopPointDTO
     */
    'stopPointAddressId'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof StopPointDTO
     */
    'orderIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface TripDTO
 */
export interface TripDTO {
    /**
     * 
     * @type {string}
     * @memberof TripDTO
     */
    'estimatedStartTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof TripDTO
     */
    'estimatedEndTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof TripDTO
     */
    'totalLoadKg'?: number;
    /**
     * 
     * @type {number}
     * @memberof TripDTO
     */
    'totalKm'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TripDTO
     */
    'isFinal'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TripDTO
     */
    'fromAddressId'?: number;
    /**
     * 
     * @type {number}
     * @memberof TripDTO
     */
    'toAddressId'?: number;
    /**
     * 
     * @type {number}
     * @memberof TripDTO
     */
    'vehicleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof TripDTO
     */
    'driverUserXId'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof TripDTO
     */
    'orderIds'?: Array<number>;
    /**
     * 
     * @type {Array<StopPointDTO>}
     * @memberof TripDTO
     */
    'stopPoints'?: Array<StopPointDTO>;
}
/**
 * 
 * @export
 * @interface UnplannedOrderDTO
 */
export interface UnplannedOrderDTO {
    /**
     * 
     * @type {string}
     * @memberof UnplannedOrderDTO
     */
    'reason'?: string;
    /**
     * 
     * @type {number}
     * @memberof UnplannedOrderDTO
     */
    'orderItemId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UnplannedOrderDTO
     */
    'orderId'?: number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'login': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'langKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'resetDate'?: string;
}
/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDTO
     */
    'activated'?: boolean;
}
/**
 * 
 * @export
 * @interface UserXDTO
 */
export interface UserXDTO {
    /**
     * 
     * @type {number}
     * @memberof UserXDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserXDTO
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserXDTO
     */
    'role'?: string;
    /**
     * 
     * @type {UserDTO}
     * @memberof UserXDTO
     */
    'user'?: UserDTO;
    /**
     * 
     * @type {AddressDTO}
     * @memberof UserXDTO
     */
    'address'?: AddressDTO;
    /**
     * 
     * @type {number}
     * @memberof UserXDTO
     */
    'addressId'?: number;
}
/**
 * 
 * @export
 * @interface VehicleDTO
 */
export interface VehicleDTO {
    /**
     * 
     * @type {number}
     * @memberof VehicleDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof VehicleDTO
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleDTO
     */
    'licensePlatesNumber'?: string;
    /**
     * 
     * @type {number}
     * @memberof VehicleDTO
     */
    'maxLoadKg'?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleDTO
     */
    'minLoadKg'?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleDTO
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleDTO
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleDTO
     */
    'length'?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleDTO
     */
    'minPallets'?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleDTO
     */
    'maxPallets'?: number;
    /**
     * 
     * @type {string}
     * @memberof VehicleDTO
     */
    'registrationDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleDTO
     */
    'registrationExpireDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleDTO
     */
    'fuelType'?: string;
    /**
     * 
     * @type {number}
     * @memberof VehicleDTO
     */
    'averageVelocity'?: number;
    /**
     * 
     * @type {string}
     * @memberof VehicleDTO
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof VehicleDTO
     */
    'maxStopPoints'?: number;
    /**
     * 
     * @type {UserXDTO}
     * @memberof VehicleDTO
     */
    'ownerUserX'?: UserXDTO;
    /**
     * 
     * @type {UserXDTO}
     * @memberof VehicleDTO
     */
    'driver'?: UserXDTO;
    /**
     * 
     * @type {AddressDTO}
     * @memberof VehicleDTO
     */
    'currentAddress'?: AddressDTO;
}
/**
 * 
 * @export
 * @interface VehicleForbiddenAddressDTO
 */
export interface VehicleForbiddenAddressDTO {
    /**
     * 
     * @type {number}
     * @memberof VehicleForbiddenAddressDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleForbiddenAddressDTO
     */
    'vehicleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleForbiddenAddressDTO
     */
    'addressId'?: number;
}

/**
 * AccountResourceApi - axios parameter creator
 * @export
 */
export const AccountResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateAccount: async (key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('activateAccount', 'key', key)
            const localVarPath = `/api/activate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PasswordChangeDTO} passwordChangeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (passwordChangeDTO: PasswordChangeDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordChangeDTO' is not null or undefined
            assertParamExists('changePassword', 'passwordChangeDTO', passwordChangeDTO)
            const localVarPath = `/api/account/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordChangeDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {KeyAndPasswordVM} keyAndPasswordVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishPasswordReset: async (keyAndPasswordVM: KeyAndPasswordVM, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyAndPasswordVM' is not null or undefined
            assertParamExists('finishPasswordReset', 'keyAndPasswordVM', keyAndPasswordVM)
            const localVarPath = `/api/account/reset-password/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(keyAndPasswordVM, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAuthenticated: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ManagedUserVM} managedUserVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccount: async (managedUserVM: ManagedUserVM, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'managedUserVM' is not null or undefined
            assertParamExists('registerAccount', 'managedUserVM', managedUserVM)
            const localVarPath = `/api/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(managedUserVM, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPasswordReset: async (body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('requestPasswordReset', 'body', body)
            const localVarPath = `/api/account/reset-password/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AdminUserDTO} adminUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAccount: async (adminUserDTO: AdminUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminUserDTO' is not null or undefined
            assertParamExists('saveAccount', 'adminUserDTO', adminUserDTO)
            const localVarPath = `/api/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountResourceApi - functional programming interface
 * @export
 */
export const AccountResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateAccount(key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activateAccount(key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountResourceApi.activateAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PasswordChangeDTO} passwordChangeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(passwordChangeDTO: PasswordChangeDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(passwordChangeDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountResourceApi.changePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {KeyAndPasswordVM} keyAndPasswordVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async finishPasswordReset(keyAndPasswordVM: KeyAndPasswordVM, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.finishPasswordReset(keyAndPasswordVM, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountResourceApi.finishPasswordReset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountResourceApi.getAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isAuthenticated(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isAuthenticated(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountResourceApi.isAuthenticated']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ManagedUserVM} managedUserVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerAccount(managedUserVM: ManagedUserVM, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerAccount(managedUserVM, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountResourceApi.registerAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestPasswordReset(body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestPasswordReset(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountResourceApi.requestPasswordReset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AdminUserDTO} adminUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAccount(adminUserDTO: AdminUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAccount(adminUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountResourceApi.saveAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountResourceApi - factory interface
 * @export
 */
export const AccountResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateAccount(key: string, options?: any): AxiosPromise<void> {
            return localVarFp.activateAccount(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PasswordChangeDTO} passwordChangeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(passwordChangeDTO: PasswordChangeDTO, options?: any): AxiosPromise<void> {
            return localVarFp.changePassword(passwordChangeDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {KeyAndPasswordVM} keyAndPasswordVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishPasswordReset(keyAndPasswordVM: KeyAndPasswordVM, options?: any): AxiosPromise<void> {
            return localVarFp.finishPasswordReset(keyAndPasswordVM, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(options?: any): AxiosPromise<AdminUserDTO> {
            return localVarFp.getAccount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAuthenticated(options?: any): AxiosPromise<string> {
            return localVarFp.isAuthenticated(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ManagedUserVM} managedUserVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccount(managedUserVM: ManagedUserVM, options?: any): AxiosPromise<User> {
            return localVarFp.registerAccount(managedUserVM, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPasswordReset(body: string, options?: any): AxiosPromise<void> {
            return localVarFp.requestPasswordReset(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminUserDTO} adminUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAccount(adminUserDTO: AdminUserDTO, options?: any): AxiosPromise<void> {
            return localVarFp.saveAccount(adminUserDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountResourceApi - object-oriented interface
 * @export
 * @class AccountResourceApi
 * @extends {BaseAPI}
 */
export class AccountResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public activateAccount(key: string, options?: RawAxiosRequestConfig) {
        return AccountResourceApiFp(this.configuration).activateAccount(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PasswordChangeDTO} passwordChangeDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public changePassword(passwordChangeDTO: PasswordChangeDTO, options?: RawAxiosRequestConfig) {
        return AccountResourceApiFp(this.configuration).changePassword(passwordChangeDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {KeyAndPasswordVM} keyAndPasswordVM 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public finishPasswordReset(keyAndPasswordVM: KeyAndPasswordVM, options?: RawAxiosRequestConfig) {
        return AccountResourceApiFp(this.configuration).finishPasswordReset(keyAndPasswordVM, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public getAccount(options?: RawAxiosRequestConfig) {
        return AccountResourceApiFp(this.configuration).getAccount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public isAuthenticated(options?: RawAxiosRequestConfig) {
        return AccountResourceApiFp(this.configuration).isAuthenticated(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ManagedUserVM} managedUserVM 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public registerAccount(managedUserVM: ManagedUserVM, options?: RawAxiosRequestConfig) {
        return AccountResourceApiFp(this.configuration).registerAccount(managedUserVM, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public requestPasswordReset(body: string, options?: RawAxiosRequestConfig) {
        return AccountResourceApiFp(this.configuration).requestPasswordReset(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminUserDTO} adminUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public saveAccount(adminUserDTO: AdminUserDTO, options?: RawAxiosRequestConfig) {
        return AccountResourceApiFp(this.configuration).saveAccount(adminUserDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AddressResourceApi - axios parameter creator
 * @export
 */
export const AddressResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddressDTO} addressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAddress: async (addressDTO: AddressDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressDTO' is not null or undefined
            assertParamExists('createAddress', 'addressDTO', addressDTO)
            const localVarPath = `/api/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddress: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAddress', 'id', id)
            const localVarPath = `/api/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAddress', 'id', id)
            const localVarPath = `/api/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAddresses: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} communeId 
         * @param {number} districtId 
         * @param {string} street 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAddressesByCondition: async (communeId: number, districtId: number, street: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'communeId' is not null or undefined
            assertParamExists('getAllAddressesByCondition', 'communeId', communeId)
            // verify required parameter 'districtId' is not null or undefined
            assertParamExists('getAllAddressesByCondition', 'districtId', districtId)
            // verify required parameter 'street' is not null or undefined
            assertParamExists('getAllAddressesByCondition', 'street', street)
            const localVarPath = `/api/addresses-by-condition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (communeId !== undefined) {
                localVarQueryParameter['communeId'] = communeId;
            }

            if (districtId !== undefined) {
                localVarQueryParameter['districtId'] = districtId;
            }

            if (street !== undefined) {
                localVarQueryParameter['street'] = street;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AddressDTO} addressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateAddress: async (id: number, addressDTO: AddressDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateAddress', 'id', id)
            // verify required parameter 'addressDTO' is not null or undefined
            assertParamExists('partialUpdateAddress', 'addressDTO', addressDTO)
            const localVarPath = `/api/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AddressDTO} addressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress: async (id: number, addressDTO: AddressDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAddress', 'id', id)
            // verify required parameter 'addressDTO' is not null or undefined
            assertParamExists('updateAddress', 'addressDTO', addressDTO)
            const localVarPath = `/api/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressResourceApi - functional programming interface
 * @export
 */
export const AddressResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddressDTO} addressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAddress(addressDTO: AddressDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAddress(addressDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressResourceApi.createAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAddress(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAddress(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressResourceApi.deleteAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddress(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddress(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressResourceApi.getAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAddresses(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddressDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAddresses(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressResourceApi.getAllAddresses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} communeId 
         * @param {number} districtId 
         * @param {string} street 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAddressesByCondition(communeId: number, districtId: number, street: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddressDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAddressesByCondition(communeId, districtId, street, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressResourceApi.getAllAddressesByCondition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {AddressDTO} addressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateAddress(id: number, addressDTO: AddressDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateAddress(id, addressDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressResourceApi.partialUpdateAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {AddressDTO} addressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAddress(id: number, addressDTO: AddressDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAddress(id, addressDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressResourceApi.updateAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AddressResourceApi - factory interface
 * @export
 */
export const AddressResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {AddressDTO} addressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAddress(addressDTO: AddressDTO, options?: any): AxiosPromise<AddressDTO> {
            return localVarFp.createAddress(addressDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddress(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAddress(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress(id: number, options?: any): AxiosPromise<AddressDTO> {
            return localVarFp.getAddress(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAddresses(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<AddressDTO>> {
            return localVarFp.getAllAddresses(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} communeId 
         * @param {number} districtId 
         * @param {string} street 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAddressesByCondition(communeId: number, districtId: number, street: string, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<AddressDTO>> {
            return localVarFp.getAllAddressesByCondition(communeId, districtId, street, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AddressDTO} addressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateAddress(id: number, addressDTO: AddressDTO, options?: any): AxiosPromise<AddressDTO> {
            return localVarFp.partialUpdateAddress(id, addressDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AddressDTO} addressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(id: number, addressDTO: AddressDTO, options?: any): AxiosPromise<AddressDTO> {
            return localVarFp.updateAddress(id, addressDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressResourceApi - object-oriented interface
 * @export
 * @class AddressResourceApi
 * @extends {BaseAPI}
 */
export class AddressResourceApi extends BaseAPI {
    /**
     * 
     * @param {AddressDTO} addressDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressResourceApi
     */
    public createAddress(addressDTO: AddressDTO, options?: RawAxiosRequestConfig) {
        return AddressResourceApiFp(this.configuration).createAddress(addressDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressResourceApi
     */
    public deleteAddress(id: number, options?: RawAxiosRequestConfig) {
        return AddressResourceApiFp(this.configuration).deleteAddress(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressResourceApi
     */
    public getAddress(id: number, options?: RawAxiosRequestConfig) {
        return AddressResourceApiFp(this.configuration).getAddress(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressResourceApi
     */
    public getAllAddresses(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return AddressResourceApiFp(this.configuration).getAllAddresses(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} communeId 
     * @param {number} districtId 
     * @param {string} street 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressResourceApi
     */
    public getAllAddressesByCondition(communeId: number, districtId: number, street: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return AddressResourceApiFp(this.configuration).getAllAddressesByCondition(communeId, districtId, street, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AddressDTO} addressDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressResourceApi
     */
    public partialUpdateAddress(id: number, addressDTO: AddressDTO, options?: RawAxiosRequestConfig) {
        return AddressResourceApiFp(this.configuration).partialUpdateAddress(id, addressDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AddressDTO} addressDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressResourceApi
     */
    public updateAddress(id: number, addressDTO: AddressDTO, options?: RawAxiosRequestConfig) {
        return AddressResourceApiFp(this.configuration).updateAddress(id, addressDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommuneResourceApi - axios parameter creator
 * @export
 */
export const CommuneResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CommuneDTO} communeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCommune: async (communeDTO: CommuneDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'communeDTO' is not null or undefined
            assertParamExists('createCommune', 'communeDTO', communeDTO)
            const localVarPath = `/api/communes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(communeDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCommune: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCommune', 'id', id)
            const localVarPath = `/api/communes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCommunes: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/communes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommune: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCommune', 'id', id)
            const localVarPath = `/api/communes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommunesByDistrict: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCommunesByDistrict', 'id', id)
            const localVarPath = `/api/communes/district/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CommuneDTO} communeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateCommune: async (id: number, communeDTO: CommuneDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateCommune', 'id', id)
            // verify required parameter 'communeDTO' is not null or undefined
            assertParamExists('partialUpdateCommune', 'communeDTO', communeDTO)
            const localVarPath = `/api/communes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(communeDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CommuneDTO} communeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommune: async (id: number, communeDTO: CommuneDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCommune', 'id', id)
            // verify required parameter 'communeDTO' is not null or undefined
            assertParamExists('updateCommune', 'communeDTO', communeDTO)
            const localVarPath = `/api/communes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(communeDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommuneResourceApi - functional programming interface
 * @export
 */
export const CommuneResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommuneResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CommuneDTO} communeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCommune(communeDTO: CommuneDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommuneDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCommune(communeDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommuneResourceApi.createCommune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCommune(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCommune(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommuneResourceApi.deleteCommune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCommunes(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommuneDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCommunes(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommuneResourceApi.getAllCommunes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommune(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommuneDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommune(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommuneResourceApi.getCommune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommunesByDistrict(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommuneDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommunesByDistrict(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommuneResourceApi.getCommunesByDistrict']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CommuneDTO} communeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateCommune(id: number, communeDTO: CommuneDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommuneDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateCommune(id, communeDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommuneResourceApi.partialUpdateCommune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CommuneDTO} communeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCommune(id: number, communeDTO: CommuneDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommuneDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCommune(id, communeDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommuneResourceApi.updateCommune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommuneResourceApi - factory interface
 * @export
 */
export const CommuneResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommuneResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {CommuneDTO} communeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCommune(communeDTO: CommuneDTO, options?: any): AxiosPromise<CommuneDTO> {
            return localVarFp.createCommune(communeDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCommune(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCommune(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCommunes(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<CommuneDTO>> {
            return localVarFp.getAllCommunes(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommune(id: number, options?: any): AxiosPromise<CommuneDTO> {
            return localVarFp.getCommune(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommunesByDistrict(id: number, options?: any): AxiosPromise<Array<CommuneDTO>> {
            return localVarFp.getCommunesByDistrict(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CommuneDTO} communeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateCommune(id: number, communeDTO: CommuneDTO, options?: any): AxiosPromise<CommuneDTO> {
            return localVarFp.partialUpdateCommune(id, communeDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CommuneDTO} communeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommune(id: number, communeDTO: CommuneDTO, options?: any): AxiosPromise<CommuneDTO> {
            return localVarFp.updateCommune(id, communeDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommuneResourceApi - object-oriented interface
 * @export
 * @class CommuneResourceApi
 * @extends {BaseAPI}
 */
export class CommuneResourceApi extends BaseAPI {
    /**
     * 
     * @param {CommuneDTO} communeDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommuneResourceApi
     */
    public createCommune(communeDTO: CommuneDTO, options?: RawAxiosRequestConfig) {
        return CommuneResourceApiFp(this.configuration).createCommune(communeDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommuneResourceApi
     */
    public deleteCommune(id: number, options?: RawAxiosRequestConfig) {
        return CommuneResourceApiFp(this.configuration).deleteCommune(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommuneResourceApi
     */
    public getAllCommunes(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return CommuneResourceApiFp(this.configuration).getAllCommunes(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommuneResourceApi
     */
    public getCommune(id: number, options?: RawAxiosRequestConfig) {
        return CommuneResourceApiFp(this.configuration).getCommune(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommuneResourceApi
     */
    public getCommunesByDistrict(id: number, options?: RawAxiosRequestConfig) {
        return CommuneResourceApiFp(this.configuration).getCommunesByDistrict(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CommuneDTO} communeDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommuneResourceApi
     */
    public partialUpdateCommune(id: number, communeDTO: CommuneDTO, options?: RawAxiosRequestConfig) {
        return CommuneResourceApiFp(this.configuration).partialUpdateCommune(id, communeDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CommuneDTO} communeDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommuneResourceApi
     */
    public updateCommune(id: number, communeDTO: CommuneDTO, options?: RawAxiosRequestConfig) {
        return CommuneResourceApiFp(this.configuration).updateCommune(id, communeDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContractorResourceApi - axios parameter creator
 * @export
 */
export const ContractorResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ContractorDTO} contractorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContractor: async (contractorDTO: ContractorDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorDTO' is not null or undefined
            assertParamExists('createContractor', 'contractorDTO', contractorDTO)
            const localVarPath = `/api/admin/contractors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contractorDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContractor: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteContractor', 'id', id)
            const localVarPath = `/api/admin/contractors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllContractors: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/contractors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractor: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getContractor', 'id', id)
            const localVarPath = `/api/admin/contractors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractorByName: async (name: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getContractorByName', 'name', name)
            const localVarPath = `/api/admin/contractors/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ContractorDTO} contractorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateContractor: async (id: number, contractorDTO: ContractorDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateContractor', 'id', id)
            // verify required parameter 'contractorDTO' is not null or undefined
            assertParamExists('partialUpdateContractor', 'contractorDTO', contractorDTO)
            const localVarPath = `/api/admin/contractors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contractorDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ContractorDTO} contractorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContractor: async (id: number, contractorDTO: ContractorDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateContractor', 'id', id)
            // verify required parameter 'contractorDTO' is not null or undefined
            assertParamExists('updateContractor', 'contractorDTO', contractorDTO)
            const localVarPath = `/api/admin/contractors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contractorDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractorResourceApi - functional programming interface
 * @export
 */
export const ContractorResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractorResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ContractorDTO} contractorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContractor(contractorDTO: ContractorDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContractor(contractorDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContractorResourceApi.createContractor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContractor(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContractor(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContractorResourceApi.deleteContractor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllContractors(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContractorDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllContractors(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContractorResourceApi.getAllContractors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContractor(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractor(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContractorResourceApi.getContractor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContractorByName(name: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContractorDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractorByName(name, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContractorResourceApi.getContractorByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ContractorDTO} contractorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateContractor(id: number, contractorDTO: ContractorDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateContractor(id, contractorDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContractorResourceApi.partialUpdateContractor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ContractorDTO} contractorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContractor(id: number, contractorDTO: ContractorDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContractor(id, contractorDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContractorResourceApi.updateContractor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContractorResourceApi - factory interface
 * @export
 */
export const ContractorResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractorResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {ContractorDTO} contractorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContractor(contractorDTO: ContractorDTO, options?: any): AxiosPromise<ContractorDTO> {
            return localVarFp.createContractor(contractorDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContractor(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteContractor(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllContractors(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<ContractorDTO>> {
            return localVarFp.getAllContractors(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractor(id: number, options?: any): AxiosPromise<ContractorDTO> {
            return localVarFp.getContractor(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractorByName(name: string, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<ContractorDTO>> {
            return localVarFp.getContractorByName(name, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ContractorDTO} contractorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateContractor(id: number, contractorDTO: ContractorDTO, options?: any): AxiosPromise<ContractorDTO> {
            return localVarFp.partialUpdateContractor(id, contractorDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ContractorDTO} contractorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContractor(id: number, contractorDTO: ContractorDTO, options?: any): AxiosPromise<ContractorDTO> {
            return localVarFp.updateContractor(id, contractorDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContractorResourceApi - object-oriented interface
 * @export
 * @class ContractorResourceApi
 * @extends {BaseAPI}
 */
export class ContractorResourceApi extends BaseAPI {
    /**
     * 
     * @param {ContractorDTO} contractorDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorResourceApi
     */
    public createContractor(contractorDTO: ContractorDTO, options?: RawAxiosRequestConfig) {
        return ContractorResourceApiFp(this.configuration).createContractor(contractorDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorResourceApi
     */
    public deleteContractor(id: number, options?: RawAxiosRequestConfig) {
        return ContractorResourceApiFp(this.configuration).deleteContractor(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorResourceApi
     */
    public getAllContractors(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return ContractorResourceApiFp(this.configuration).getAllContractors(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorResourceApi
     */
    public getContractor(id: number, options?: RawAxiosRequestConfig) {
        return ContractorResourceApiFp(this.configuration).getContractor(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorResourceApi
     */
    public getContractorByName(name: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return ContractorResourceApiFp(this.configuration).getContractorByName(name, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ContractorDTO} contractorDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorResourceApi
     */
    public partialUpdateContractor(id: number, contractorDTO: ContractorDTO, options?: RawAxiosRequestConfig) {
        return ContractorResourceApiFp(this.configuration).partialUpdateContractor(id, contractorDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ContractorDTO} contractorDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorResourceApi
     */
    public updateContractor(id: number, contractorDTO: ContractorDTO, options?: RawAxiosRequestConfig) {
        return ContractorResourceApiFp(this.configuration).updateContractor(id, contractorDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerAssignmentResourceApi - axios parameter creator
 * @export
 */
export const CustomerAssignmentResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CustomerAssignmentDTO} customerAssignmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerAssignment: async (customerAssignmentDTO: CustomerAssignmentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerAssignmentDTO' is not null or undefined
            assertParamExists('createCustomerAssignment', 'customerAssignmentDTO', customerAssignmentDTO)
            const localVarPath = `/api/customer-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAssignmentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerAssignment: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCustomerAssignment', 'id', id)
            const localVarPath = `/api/customer-assignments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerAssignmentByEmployeeUserXId: async (employeeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteCustomerAssignmentByEmployeeUserXId', 'employeeId', employeeId)
            const localVarPath = `/api/{employeeId}/customer-assignments`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustomerAssignments: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/customer-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerAssignment: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCustomerAssignment', 'id', id)
            const localVarPath = `/api/customer-assignments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CustomerAssignmentDTO} customerAssignmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateCustomerAssignment: async (id: number, customerAssignmentDTO: CustomerAssignmentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateCustomerAssignment', 'id', id)
            // verify required parameter 'customerAssignmentDTO' is not null or undefined
            assertParamExists('partialUpdateCustomerAssignment', 'customerAssignmentDTO', customerAssignmentDTO)
            const localVarPath = `/api/customer-assignments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAssignmentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CustomerAssignmentDTO} customerAssignmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerAssignment: async (id: number, customerAssignmentDTO: CustomerAssignmentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCustomerAssignment', 'id', id)
            // verify required parameter 'customerAssignmentDTO' is not null or undefined
            assertParamExists('updateCustomerAssignment', 'customerAssignmentDTO', customerAssignmentDTO)
            const localVarPath = `/api/customer-assignments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAssignmentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerAssignmentResourceApi - functional programming interface
 * @export
 */
export const CustomerAssignmentResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerAssignmentResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CustomerAssignmentDTO} customerAssignmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomerAssignment(customerAssignmentDTO: CustomerAssignmentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAssignmentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomerAssignment(customerAssignmentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAssignmentResourceApi.createCustomerAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomerAssignment(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomerAssignment(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAssignmentResourceApi.deleteCustomerAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomerAssignmentByEmployeeUserXId(employeeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomerAssignmentByEmployeeUserXId(employeeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAssignmentResourceApi.deleteCustomerAssignmentByEmployeeUserXId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCustomerAssignments(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerAssignmentDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCustomerAssignments(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAssignmentResourceApi.getAllCustomerAssignments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerAssignment(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAssignmentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerAssignment(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAssignmentResourceApi.getCustomerAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CustomerAssignmentDTO} customerAssignmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateCustomerAssignment(id: number, customerAssignmentDTO: CustomerAssignmentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAssignmentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateCustomerAssignment(id, customerAssignmentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAssignmentResourceApi.partialUpdateCustomerAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CustomerAssignmentDTO} customerAssignmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomerAssignment(id: number, customerAssignmentDTO: CustomerAssignmentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAssignmentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomerAssignment(id, customerAssignmentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerAssignmentResourceApi.updateCustomerAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerAssignmentResourceApi - factory interface
 * @export
 */
export const CustomerAssignmentResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerAssignmentResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {CustomerAssignmentDTO} customerAssignmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerAssignment(customerAssignmentDTO: CustomerAssignmentDTO, options?: any): AxiosPromise<CustomerAssignmentDTO> {
            return localVarFp.createCustomerAssignment(customerAssignmentDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerAssignment(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCustomerAssignment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerAssignmentByEmployeeUserXId(employeeId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCustomerAssignmentByEmployeeUserXId(employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustomerAssignments(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<CustomerAssignmentDTO>> {
            return localVarFp.getAllCustomerAssignments(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerAssignment(id: number, options?: any): AxiosPromise<CustomerAssignmentDTO> {
            return localVarFp.getCustomerAssignment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CustomerAssignmentDTO} customerAssignmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateCustomerAssignment(id: number, customerAssignmentDTO: CustomerAssignmentDTO, options?: any): AxiosPromise<CustomerAssignmentDTO> {
            return localVarFp.partialUpdateCustomerAssignment(id, customerAssignmentDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CustomerAssignmentDTO} customerAssignmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerAssignment(id: number, customerAssignmentDTO: CustomerAssignmentDTO, options?: any): AxiosPromise<CustomerAssignmentDTO> {
            return localVarFp.updateCustomerAssignment(id, customerAssignmentDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerAssignmentResourceApi - object-oriented interface
 * @export
 * @class CustomerAssignmentResourceApi
 * @extends {BaseAPI}
 */
export class CustomerAssignmentResourceApi extends BaseAPI {
    /**
     * 
     * @param {CustomerAssignmentDTO} customerAssignmentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAssignmentResourceApi
     */
    public createCustomerAssignment(customerAssignmentDTO: CustomerAssignmentDTO, options?: RawAxiosRequestConfig) {
        return CustomerAssignmentResourceApiFp(this.configuration).createCustomerAssignment(customerAssignmentDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAssignmentResourceApi
     */
    public deleteCustomerAssignment(id: number, options?: RawAxiosRequestConfig) {
        return CustomerAssignmentResourceApiFp(this.configuration).deleteCustomerAssignment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAssignmentResourceApi
     */
    public deleteCustomerAssignmentByEmployeeUserXId(employeeId: number, options?: RawAxiosRequestConfig) {
        return CustomerAssignmentResourceApiFp(this.configuration).deleteCustomerAssignmentByEmployeeUserXId(employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAssignmentResourceApi
     */
    public getAllCustomerAssignments(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return CustomerAssignmentResourceApiFp(this.configuration).getAllCustomerAssignments(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAssignmentResourceApi
     */
    public getCustomerAssignment(id: number, options?: RawAxiosRequestConfig) {
        return CustomerAssignmentResourceApiFp(this.configuration).getCustomerAssignment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CustomerAssignmentDTO} customerAssignmentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAssignmentResourceApi
     */
    public partialUpdateCustomerAssignment(id: number, customerAssignmentDTO: CustomerAssignmentDTO, options?: RawAxiosRequestConfig) {
        return CustomerAssignmentResourceApiFp(this.configuration).partialUpdateCustomerAssignment(id, customerAssignmentDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CustomerAssignmentDTO} customerAssignmentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAssignmentResourceApi
     */
    public updateCustomerAssignment(id: number, customerAssignmentDTO: CustomerAssignmentDTO, options?: RawAxiosRequestConfig) {
        return CustomerAssignmentResourceApiFp(this.configuration).updateCustomerAssignment(id, customerAssignmentDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DistanceMatrixResourceApi - axios parameter creator
 * @export
 */
export const DistanceMatrixResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DistanceMatrixDTO} distanceMatrixDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDistanceMatrix: async (distanceMatrixDTO: DistanceMatrixDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'distanceMatrixDTO' is not null or undefined
            assertParamExists('createDistanceMatrix', 'distanceMatrixDTO', distanceMatrixDTO)
            const localVarPath = `/api/distance-matrices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(distanceMatrixDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDistanceMatrix: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDistanceMatrix', 'id', id)
            const localVarPath = `/api/distance-matrices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDistanceMatrices: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/distance-matrices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistanceMatrix: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDistanceMatrix', 'id', id)
            const localVarPath = `/api/distance-matrices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {DistanceMatrixDTO} distanceMatrixDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateDistanceMatrix: async (id: number, distanceMatrixDTO: DistanceMatrixDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateDistanceMatrix', 'id', id)
            // verify required parameter 'distanceMatrixDTO' is not null or undefined
            assertParamExists('partialUpdateDistanceMatrix', 'distanceMatrixDTO', distanceMatrixDTO)
            const localVarPath = `/api/distance-matrices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(distanceMatrixDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {DistanceMatrixDTO} distanceMatrixDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDistanceMatrix: async (id: number, distanceMatrixDTO: DistanceMatrixDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDistanceMatrix', 'id', id)
            // verify required parameter 'distanceMatrixDTO' is not null or undefined
            assertParamExists('updateDistanceMatrix', 'distanceMatrixDTO', distanceMatrixDTO)
            const localVarPath = `/api/distance-matrices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(distanceMatrixDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DistanceMatrixResourceApi - functional programming interface
 * @export
 */
export const DistanceMatrixResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DistanceMatrixResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DistanceMatrixDTO} distanceMatrixDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDistanceMatrix(distanceMatrixDTO: DistanceMatrixDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistanceMatrixDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDistanceMatrix(distanceMatrixDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistanceMatrixResourceApi.createDistanceMatrix']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDistanceMatrix(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDistanceMatrix(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistanceMatrixResourceApi.deleteDistanceMatrix']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDistanceMatrices(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DistanceMatrixDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDistanceMatrices(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistanceMatrixResourceApi.getAllDistanceMatrices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDistanceMatrix(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistanceMatrixDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDistanceMatrix(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistanceMatrixResourceApi.getDistanceMatrix']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {DistanceMatrixDTO} distanceMatrixDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateDistanceMatrix(id: number, distanceMatrixDTO: DistanceMatrixDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistanceMatrixDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateDistanceMatrix(id, distanceMatrixDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistanceMatrixResourceApi.partialUpdateDistanceMatrix']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {DistanceMatrixDTO} distanceMatrixDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDistanceMatrix(id: number, distanceMatrixDTO: DistanceMatrixDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistanceMatrixDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDistanceMatrix(id, distanceMatrixDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistanceMatrixResourceApi.updateDistanceMatrix']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DistanceMatrixResourceApi - factory interface
 * @export
 */
export const DistanceMatrixResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DistanceMatrixResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {DistanceMatrixDTO} distanceMatrixDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDistanceMatrix(distanceMatrixDTO: DistanceMatrixDTO, options?: any): AxiosPromise<DistanceMatrixDTO> {
            return localVarFp.createDistanceMatrix(distanceMatrixDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDistanceMatrix(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDistanceMatrix(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDistanceMatrices(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<DistanceMatrixDTO>> {
            return localVarFp.getAllDistanceMatrices(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistanceMatrix(id: number, options?: any): AxiosPromise<DistanceMatrixDTO> {
            return localVarFp.getDistanceMatrix(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {DistanceMatrixDTO} distanceMatrixDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateDistanceMatrix(id: number, distanceMatrixDTO: DistanceMatrixDTO, options?: any): AxiosPromise<DistanceMatrixDTO> {
            return localVarFp.partialUpdateDistanceMatrix(id, distanceMatrixDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {DistanceMatrixDTO} distanceMatrixDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDistanceMatrix(id: number, distanceMatrixDTO: DistanceMatrixDTO, options?: any): AxiosPromise<DistanceMatrixDTO> {
            return localVarFp.updateDistanceMatrix(id, distanceMatrixDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DistanceMatrixResourceApi - object-oriented interface
 * @export
 * @class DistanceMatrixResourceApi
 * @extends {BaseAPI}
 */
export class DistanceMatrixResourceApi extends BaseAPI {
    /**
     * 
     * @param {DistanceMatrixDTO} distanceMatrixDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistanceMatrixResourceApi
     */
    public createDistanceMatrix(distanceMatrixDTO: DistanceMatrixDTO, options?: RawAxiosRequestConfig) {
        return DistanceMatrixResourceApiFp(this.configuration).createDistanceMatrix(distanceMatrixDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistanceMatrixResourceApi
     */
    public deleteDistanceMatrix(id: number, options?: RawAxiosRequestConfig) {
        return DistanceMatrixResourceApiFp(this.configuration).deleteDistanceMatrix(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistanceMatrixResourceApi
     */
    public getAllDistanceMatrices(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return DistanceMatrixResourceApiFp(this.configuration).getAllDistanceMatrices(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistanceMatrixResourceApi
     */
    public getDistanceMatrix(id: number, options?: RawAxiosRequestConfig) {
        return DistanceMatrixResourceApiFp(this.configuration).getDistanceMatrix(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {DistanceMatrixDTO} distanceMatrixDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistanceMatrixResourceApi
     */
    public partialUpdateDistanceMatrix(id: number, distanceMatrixDTO: DistanceMatrixDTO, options?: RawAxiosRequestConfig) {
        return DistanceMatrixResourceApiFp(this.configuration).partialUpdateDistanceMatrix(id, distanceMatrixDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {DistanceMatrixDTO} distanceMatrixDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistanceMatrixResourceApi
     */
    public updateDistanceMatrix(id: number, distanceMatrixDTO: DistanceMatrixDTO, options?: RawAxiosRequestConfig) {
        return DistanceMatrixResourceApiFp(this.configuration).updateDistanceMatrix(id, distanceMatrixDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DistrictResourceApi - axios parameter creator
 * @export
 */
export const DistrictResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DistrictDTO} districtDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDistrict: async (districtDTO: DistrictDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'districtDTO' is not null or undefined
            assertParamExists('createDistrict', 'districtDTO', districtDTO)
            const localVarPath = `/api/districts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(districtDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDistrict: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDistrict', 'id', id)
            const localVarPath = `/api/districts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDistricts: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/districts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistrict: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDistrict', 'id', id)
            const localVarPath = `/api/districts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistrictsByProvince: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDistrictsByProvince', 'id', id)
            const localVarPath = `/api/districts/province/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {DistrictDTO} districtDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateDistrict: async (id: number, districtDTO: DistrictDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateDistrict', 'id', id)
            // verify required parameter 'districtDTO' is not null or undefined
            assertParamExists('partialUpdateDistrict', 'districtDTO', districtDTO)
            const localVarPath = `/api/districts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(districtDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {DistrictDTO} districtDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDistrict: async (id: number, districtDTO: DistrictDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDistrict', 'id', id)
            // verify required parameter 'districtDTO' is not null or undefined
            assertParamExists('updateDistrict', 'districtDTO', districtDTO)
            const localVarPath = `/api/districts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(districtDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DistrictResourceApi - functional programming interface
 * @export
 */
export const DistrictResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DistrictResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DistrictDTO} districtDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDistrict(districtDTO: DistrictDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistrictDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDistrict(districtDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistrictResourceApi.createDistrict']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDistrict(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDistrict(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistrictResourceApi.deleteDistrict']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDistricts(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DistrictDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDistricts(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistrictResourceApi.getAllDistricts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDistrict(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistrictDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDistrict(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistrictResourceApi.getDistrict']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDistrictsByProvince(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DistrictDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDistrictsByProvince(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistrictResourceApi.getDistrictsByProvince']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {DistrictDTO} districtDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateDistrict(id: number, districtDTO: DistrictDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistrictDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateDistrict(id, districtDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistrictResourceApi.partialUpdateDistrict']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {DistrictDTO} districtDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDistrict(id: number, districtDTO: DistrictDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistrictDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDistrict(id, districtDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistrictResourceApi.updateDistrict']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DistrictResourceApi - factory interface
 * @export
 */
export const DistrictResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DistrictResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {DistrictDTO} districtDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDistrict(districtDTO: DistrictDTO, options?: any): AxiosPromise<DistrictDTO> {
            return localVarFp.createDistrict(districtDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDistrict(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDistrict(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDistricts(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<DistrictDTO>> {
            return localVarFp.getAllDistricts(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistrict(id: number, options?: any): AxiosPromise<DistrictDTO> {
            return localVarFp.getDistrict(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistrictsByProvince(id: number, options?: any): AxiosPromise<Array<DistrictDTO>> {
            return localVarFp.getDistrictsByProvince(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {DistrictDTO} districtDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateDistrict(id: number, districtDTO: DistrictDTO, options?: any): AxiosPromise<DistrictDTO> {
            return localVarFp.partialUpdateDistrict(id, districtDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {DistrictDTO} districtDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDistrict(id: number, districtDTO: DistrictDTO, options?: any): AxiosPromise<DistrictDTO> {
            return localVarFp.updateDistrict(id, districtDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DistrictResourceApi - object-oriented interface
 * @export
 * @class DistrictResourceApi
 * @extends {BaseAPI}
 */
export class DistrictResourceApi extends BaseAPI {
    /**
     * 
     * @param {DistrictDTO} districtDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistrictResourceApi
     */
    public createDistrict(districtDTO: DistrictDTO, options?: RawAxiosRequestConfig) {
        return DistrictResourceApiFp(this.configuration).createDistrict(districtDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistrictResourceApi
     */
    public deleteDistrict(id: number, options?: RawAxiosRequestConfig) {
        return DistrictResourceApiFp(this.configuration).deleteDistrict(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistrictResourceApi
     */
    public getAllDistricts(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return DistrictResourceApiFp(this.configuration).getAllDistricts(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistrictResourceApi
     */
    public getDistrict(id: number, options?: RawAxiosRequestConfig) {
        return DistrictResourceApiFp(this.configuration).getDistrict(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistrictResourceApi
     */
    public getDistrictsByProvince(id: number, options?: RawAxiosRequestConfig) {
        return DistrictResourceApiFp(this.configuration).getDistrictsByProvince(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {DistrictDTO} districtDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistrictResourceApi
     */
    public partialUpdateDistrict(id: number, districtDTO: DistrictDTO, options?: RawAxiosRequestConfig) {
        return DistrictResourceApiFp(this.configuration).partialUpdateDistrict(id, districtDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {DistrictDTO} districtDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistrictResourceApi
     */
    public updateDistrict(id: number, districtDTO: DistrictDTO, options?: RawAxiosRequestConfig) {
        return DistrictResourceApiFp(this.configuration).updateDistrict(id, districtDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderItemResourceApi - axios parameter creator
 * @export
 */
export const OrderItemResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {OrderItemDTO} orderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrderItem: async (orderItemDTO: OrderItemDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderItemDTO' is not null or undefined
            assertParamExists('createOrderItem', 'orderItemDTO', orderItemDTO)
            const localVarPath = `/api/order-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderItemDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderItem: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOrderItem', 'id', id)
            const localVarPath = `/api/order-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrderItems: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/order-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumOfOrderItem: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/order-items-num`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumOfOrderItemOfOrder: async (orderId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getNumOfOrderItemOfOrder', 'orderId', orderId)
            const localVarPath = `/api/{orderId}/order-items-num`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItem: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrderItem', 'id', id)
            const localVarPath = `/api/order-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemsByOrderId: async (orderId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrderItemsByOrderId', 'orderId', orderId)
            const localVarPath = `/api/order-items-list/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {OrderItemDTO} orderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateOrderItem: async (id: number, orderItemDTO: OrderItemDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateOrderItem', 'id', id)
            // verify required parameter 'orderItemDTO' is not null or undefined
            assertParamExists('partialUpdateOrderItem', 'orderItemDTO', orderItemDTO)
            const localVarPath = `/api/order-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderItemDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {OrderItemDTO} orderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderItem: async (id: number, orderItemDTO: OrderItemDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOrderItem', 'id', id)
            // verify required parameter 'orderItemDTO' is not null or undefined
            assertParamExists('updateOrderItem', 'orderItemDTO', orderItemDTO)
            const localVarPath = `/api/order-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderItemDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderItemResourceApi - functional programming interface
 * @export
 */
export const OrderItemResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderItemResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {OrderItemDTO} orderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrderItem(orderItemDTO: OrderItemDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderItemDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrderItem(orderItemDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderItemResourceApi.createOrderItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrderItem(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrderItem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderItemResourceApi.deleteOrderItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrderItems(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderItemDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrderItems(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderItemResourceApi.getAllOrderItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNumOfOrderItem(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNumOfOrderItem(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderItemResourceApi.getNumOfOrderItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNumOfOrderItemOfOrder(orderId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNumOfOrderItemOfOrder(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderItemResourceApi.getNumOfOrderItemOfOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderItem(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderItemDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderItem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderItemResourceApi.getOrderItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} orderId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderItemsByOrderId(orderId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderItemDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderItemsByOrderId(orderId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderItemResourceApi.getOrderItemsByOrderId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {OrderItemDTO} orderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateOrderItem(id: number, orderItemDTO: OrderItemDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderItemDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateOrderItem(id, orderItemDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderItemResourceApi.partialUpdateOrderItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {OrderItemDTO} orderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrderItem(id: number, orderItemDTO: OrderItemDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderItemDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrderItem(id, orderItemDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderItemResourceApi.updateOrderItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderItemResourceApi - factory interface
 * @export
 */
export const OrderItemResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderItemResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {OrderItemDTO} orderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrderItem(orderItemDTO: OrderItemDTO, options?: any): AxiosPromise<OrderItemDTO> {
            return localVarFp.createOrderItem(orderItemDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderItem(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOrderItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrderItems(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<OrderItemDTO>> {
            return localVarFp.getAllOrderItems(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumOfOrderItem(options?: any): AxiosPromise<number> {
            return localVarFp.getNumOfOrderItem(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumOfOrderItemOfOrder(orderId: number, options?: any): AxiosPromise<number> {
            return localVarFp.getNumOfOrderItemOfOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItem(id: number, options?: any): AxiosPromise<OrderItemDTO> {
            return localVarFp.getOrderItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} orderId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemsByOrderId(orderId: number, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<OrderItemDTO>> {
            return localVarFp.getOrderItemsByOrderId(orderId, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {OrderItemDTO} orderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateOrderItem(id: number, orderItemDTO: OrderItemDTO, options?: any): AxiosPromise<OrderItemDTO> {
            return localVarFp.partialUpdateOrderItem(id, orderItemDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {OrderItemDTO} orderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderItem(id: number, orderItemDTO: OrderItemDTO, options?: any): AxiosPromise<OrderItemDTO> {
            return localVarFp.updateOrderItem(id, orderItemDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderItemResourceApi - object-oriented interface
 * @export
 * @class OrderItemResourceApi
 * @extends {BaseAPI}
 */
export class OrderItemResourceApi extends BaseAPI {
    /**
     * 
     * @param {OrderItemDTO} orderItemDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemResourceApi
     */
    public createOrderItem(orderItemDTO: OrderItemDTO, options?: RawAxiosRequestConfig) {
        return OrderItemResourceApiFp(this.configuration).createOrderItem(orderItemDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemResourceApi
     */
    public deleteOrderItem(id: number, options?: RawAxiosRequestConfig) {
        return OrderItemResourceApiFp(this.configuration).deleteOrderItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemResourceApi
     */
    public getAllOrderItems(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return OrderItemResourceApiFp(this.configuration).getAllOrderItems(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemResourceApi
     */
    public getNumOfOrderItem(options?: RawAxiosRequestConfig) {
        return OrderItemResourceApiFp(this.configuration).getNumOfOrderItem(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemResourceApi
     */
    public getNumOfOrderItemOfOrder(orderId: number, options?: RawAxiosRequestConfig) {
        return OrderItemResourceApiFp(this.configuration).getNumOfOrderItemOfOrder(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemResourceApi
     */
    public getOrderItem(id: number, options?: RawAxiosRequestConfig) {
        return OrderItemResourceApiFp(this.configuration).getOrderItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} orderId 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemResourceApi
     */
    public getOrderItemsByOrderId(orderId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return OrderItemResourceApiFp(this.configuration).getOrderItemsByOrderId(orderId, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {OrderItemDTO} orderItemDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemResourceApi
     */
    public partialUpdateOrderItem(id: number, orderItemDTO: OrderItemDTO, options?: RawAxiosRequestConfig) {
        return OrderItemResourceApiFp(this.configuration).partialUpdateOrderItem(id, orderItemDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {OrderItemDTO} orderItemDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemResourceApi
     */
    public updateOrderItem(id: number, orderItemDTO: OrderItemDTO, options?: RawAxiosRequestConfig) {
        return OrderItemResourceApiFp(this.configuration).updateOrderItem(id, orderItemDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderResourceApi - axios parameter creator
 * @export
 */
export const OrderResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: async (orderDTO: OrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderDTO' is not null or undefined
            assertParamExists('createOrder', 'orderDTO', orderDTO)
            const localVarPath = `/api/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOrder', 'id', id)
            const localVarPath = `/api/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrders: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberOfOrder: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/orders-num`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberOfOrderAssignToEmployee: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getNumberOfOrderAssignToEmployee', 'userId', userId)
            const localVarPath = `/api/{userId}/orders-num`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrder', 'id', id)
            const localVarPath = `/api/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersAssignToEmployee: async (userId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getOrdersAssignToEmployee', 'userId', userId)
            const localVarPath = `/api/{userId}/orders`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateOrder: async (id: number, orderDTO: OrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateOrder', 'id', id)
            // verify required parameter 'orderDTO' is not null or undefined
            assertParamExists('partialUpdateOrder', 'orderDTO', orderDTO)
            const localVarPath = `/api/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: async (id: number, orderDTO: OrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOrder', 'id', id)
            // verify required parameter 'orderDTO' is not null or undefined
            assertParamExists('updateOrder', 'orderDTO', orderDTO)
            const localVarPath = `/api/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderResourceApi - functional programming interface
 * @export
 */
export const OrderResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrder(orderDTO: OrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(orderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderResourceApi.createOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrder(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderResourceApi.deleteOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrders(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrders(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderResourceApi.getAllOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNumberOfOrder(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNumberOfOrder(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderResourceApi.getNumberOfOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNumberOfOrderAssignToEmployee(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNumberOfOrderAssignToEmployee(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderResourceApi.getNumberOfOrderAssignToEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderResourceApi.getOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdersAssignToEmployee(userId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdersAssignToEmployee(userId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderResourceApi.getOrdersAssignToEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateOrder(id: number, orderDTO: OrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateOrder(id, orderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderResourceApi.partialUpdateOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrder(id: number, orderDTO: OrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrder(id, orderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderResourceApi.updateOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderResourceApi - factory interface
 * @export
 */
export const OrderResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(orderDTO: OrderDTO, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.createOrder(orderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrders(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<OrderDTO>> {
            return localVarFp.getAllOrders(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberOfOrder(options?: any): AxiosPromise<number> {
            return localVarFp.getNumberOfOrder(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberOfOrderAssignToEmployee(userId: number, options?: any): AxiosPromise<number> {
            return localVarFp.getNumberOfOrderAssignToEmployee(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(id: number, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.getOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersAssignToEmployee(userId: number, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<OrderDTO>> {
            return localVarFp.getOrdersAssignToEmployee(userId, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateOrder(id: number, orderDTO: OrderDTO, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.partialUpdateOrder(id, orderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(id: number, orderDTO: OrderDTO, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.updateOrder(id, orderDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderResourceApi - object-oriented interface
 * @export
 * @class OrderResourceApi
 * @extends {BaseAPI}
 */
export class OrderResourceApi extends BaseAPI {
    /**
     * 
     * @param {OrderDTO} orderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public createOrder(orderDTO: OrderDTO, options?: RawAxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).createOrder(orderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public deleteOrder(id: number, options?: RawAxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).deleteOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public getAllOrders(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).getAllOrders(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public getNumberOfOrder(options?: RawAxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).getNumberOfOrder(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public getNumberOfOrderAssignToEmployee(userId: number, options?: RawAxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).getNumberOfOrderAssignToEmployee(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public getOrder(id: number, options?: RawAxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).getOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public getOrdersAssignToEmployee(userId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).getOrdersAssignToEmployee(userId, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {OrderDTO} orderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public partialUpdateOrder(id: number, orderDTO: OrderDTO, options?: RawAxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).partialUpdateOrder(id, orderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {OrderDTO} orderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderResourceApi
     */
    public updateOrder(id: number, orderDTO: OrderDTO, options?: RawAxiosRequestConfig) {
        return OrderResourceApiFp(this.configuration).updateOrder(id, orderDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PositionResourceApi - axios parameter creator
 * @export
 */
export const PositionResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PositionDTO} positionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPosition: async (positionDTO: PositionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionDTO' is not null or undefined
            assertParamExists('createPosition', 'positionDTO', positionDTO)
            const localVarPath = `/api/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(positionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePosition: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePosition', 'id', id)
            const localVarPath = `/api/positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPositions: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPositionsByVehicle: async (id: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAllPositionsByVehicle', 'id', id)
            const localVarPath = `/api/positions/vehicle/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosition: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPosition', 'id', id)
            const localVarPath = `/api/positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PositionDTO} positionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdatePosition: async (id: number, positionDTO: PositionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdatePosition', 'id', id)
            // verify required parameter 'positionDTO' is not null or undefined
            assertParamExists('partialUpdatePosition', 'positionDTO', positionDTO)
            const localVarPath = `/api/positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(positionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PositionDTO} positionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosition: async (id: number, positionDTO: PositionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePosition', 'id', id)
            // verify required parameter 'positionDTO' is not null or undefined
            assertParamExists('updatePosition', 'positionDTO', positionDTO)
            const localVarPath = `/api/positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(positionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PositionResourceApi - functional programming interface
 * @export
 */
export const PositionResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PositionResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PositionDTO} positionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPosition(positionDTO: PositionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPosition(positionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionResourceApi.createPosition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePosition(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePosition(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionResourceApi.deletePosition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPositions(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PositionDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPositions(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionResourceApi.getAllPositions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPositionsByVehicle(id: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPositionsByVehicle(id, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionResourceApi.getAllPositionsByVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosition(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPosition(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionResourceApi.getPosition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PositionDTO} positionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdatePosition(id: number, positionDTO: PositionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdatePosition(id, positionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionResourceApi.partialUpdatePosition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PositionDTO} positionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePosition(id: number, positionDTO: PositionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePosition(id, positionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionResourceApi.updatePosition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PositionResourceApi - factory interface
 * @export
 */
export const PositionResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PositionResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {PositionDTO} positionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPosition(positionDTO: PositionDTO, options?: any): AxiosPromise<PositionDTO> {
            return localVarFp.createPosition(positionDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePosition(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deletePosition(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPositions(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<PositionDTO>> {
            return localVarFp.getAllPositions(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPositionsByVehicle(id: number, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<PositionDTO> {
            return localVarFp.getAllPositionsByVehicle(id, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosition(id: number, options?: any): AxiosPromise<PositionDTO> {
            return localVarFp.getPosition(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PositionDTO} positionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdatePosition(id: number, positionDTO: PositionDTO, options?: any): AxiosPromise<PositionDTO> {
            return localVarFp.partialUpdatePosition(id, positionDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PositionDTO} positionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosition(id: number, positionDTO: PositionDTO, options?: any): AxiosPromise<PositionDTO> {
            return localVarFp.updatePosition(id, positionDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PositionResourceApi - object-oriented interface
 * @export
 * @class PositionResourceApi
 * @extends {BaseAPI}
 */
export class PositionResourceApi extends BaseAPI {
    /**
     * 
     * @param {PositionDTO} positionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionResourceApi
     */
    public createPosition(positionDTO: PositionDTO, options?: RawAxiosRequestConfig) {
        return PositionResourceApiFp(this.configuration).createPosition(positionDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionResourceApi
     */
    public deletePosition(id: number, options?: RawAxiosRequestConfig) {
        return PositionResourceApiFp(this.configuration).deletePosition(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionResourceApi
     */
    public getAllPositions(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return PositionResourceApiFp(this.configuration).getAllPositions(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionResourceApi
     */
    public getAllPositionsByVehicle(id: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return PositionResourceApiFp(this.configuration).getAllPositionsByVehicle(id, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionResourceApi
     */
    public getPosition(id: number, options?: RawAxiosRequestConfig) {
        return PositionResourceApiFp(this.configuration).getPosition(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PositionDTO} positionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionResourceApi
     */
    public partialUpdatePosition(id: number, positionDTO: PositionDTO, options?: RawAxiosRequestConfig) {
        return PositionResourceApiFp(this.configuration).partialUpdatePosition(id, positionDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PositionDTO} positionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionResourceApi
     */
    public updatePosition(id: number, positionDTO: PositionDTO, options?: RawAxiosRequestConfig) {
        return PositionResourceApiFp(this.configuration).updatePosition(id, positionDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProvinceResourceApi - axios parameter creator
 * @export
 */
export const ProvinceResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ProvinceDTO} provinceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProvince: async (provinceDTO: ProvinceDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provinceDTO' is not null or undefined
            assertParamExists('createProvince', 'provinceDTO', provinceDTO)
            const localVarPath = `/api/provinces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(provinceDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvince: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProvince', 'id', id)
            const localVarPath = `/api/provinces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProvinces: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/provinces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvince: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProvince', 'id', id)
            const localVarPath = `/api/provinces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProvinceDTO} provinceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateProvince: async (id: number, provinceDTO: ProvinceDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateProvince', 'id', id)
            // verify required parameter 'provinceDTO' is not null or undefined
            assertParamExists('partialUpdateProvince', 'provinceDTO', provinceDTO)
            const localVarPath = `/api/provinces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(provinceDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProvinceDTO} provinceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProvince: async (id: number, provinceDTO: ProvinceDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProvince', 'id', id)
            // verify required parameter 'provinceDTO' is not null or undefined
            assertParamExists('updateProvince', 'provinceDTO', provinceDTO)
            const localVarPath = `/api/provinces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(provinceDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvinceResourceApi - functional programming interface
 * @export
 */
export const ProvinceResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvinceResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ProvinceDTO} provinceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProvince(provinceDTO: ProvinceDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvinceDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProvince(provinceDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvinceResourceApi.createProvince']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProvince(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProvince(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvinceResourceApi.deleteProvince']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProvinces(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProvinceDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProvinces(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvinceResourceApi.getAllProvinces']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProvince(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvinceDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProvince(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvinceResourceApi.getProvince']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProvinceDTO} provinceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateProvince(id: number, provinceDTO: ProvinceDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvinceDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateProvince(id, provinceDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvinceResourceApi.partialUpdateProvince']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProvinceDTO} provinceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProvince(id: number, provinceDTO: ProvinceDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvinceDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProvince(id, provinceDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvinceResourceApi.updateProvince']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProvinceResourceApi - factory interface
 * @export
 */
export const ProvinceResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvinceResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {ProvinceDTO} provinceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProvince(provinceDTO: ProvinceDTO, options?: any): AxiosPromise<ProvinceDTO> {
            return localVarFp.createProvince(provinceDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvince(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProvince(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProvinces(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<ProvinceDTO>> {
            return localVarFp.getAllProvinces(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvince(id: number, options?: any): AxiosPromise<ProvinceDTO> {
            return localVarFp.getProvince(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProvinceDTO} provinceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateProvince(id: number, provinceDTO: ProvinceDTO, options?: any): AxiosPromise<ProvinceDTO> {
            return localVarFp.partialUpdateProvince(id, provinceDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProvinceDTO} provinceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProvince(id: number, provinceDTO: ProvinceDTO, options?: any): AxiosPromise<ProvinceDTO> {
            return localVarFp.updateProvince(id, provinceDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProvinceResourceApi - object-oriented interface
 * @export
 * @class ProvinceResourceApi
 * @extends {BaseAPI}
 */
export class ProvinceResourceApi extends BaseAPI {
    /**
     * 
     * @param {ProvinceDTO} provinceDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvinceResourceApi
     */
    public createProvince(provinceDTO: ProvinceDTO, options?: RawAxiosRequestConfig) {
        return ProvinceResourceApiFp(this.configuration).createProvince(provinceDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvinceResourceApi
     */
    public deleteProvince(id: number, options?: RawAxiosRequestConfig) {
        return ProvinceResourceApiFp(this.configuration).deleteProvince(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvinceResourceApi
     */
    public getAllProvinces(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return ProvinceResourceApiFp(this.configuration).getAllProvinces(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvinceResourceApi
     */
    public getProvince(id: number, options?: RawAxiosRequestConfig) {
        return ProvinceResourceApiFp(this.configuration).getProvince(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProvinceDTO} provinceDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvinceResourceApi
     */
    public partialUpdateProvince(id: number, provinceDTO: ProvinceDTO, options?: RawAxiosRequestConfig) {
        return ProvinceResourceApiFp(this.configuration).partialUpdateProvince(id, provinceDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProvinceDTO} provinceDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvinceResourceApi
     */
    public updateProvince(id: number, provinceDTO: ProvinceDTO, options?: RawAxiosRequestConfig) {
        return ProvinceResourceApiFp(this.configuration).updateProvince(id, provinceDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PublicUserResourceApi - axios parameter creator
 * @export
 */
export const PublicUserResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublicUsers: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorities: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authorities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicUserResourceApi - functional programming interface
 * @export
 */
export const PublicUserResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicUserResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPublicUsers(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPublicUsers(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicUserResourceApi.getAllPublicUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorities(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorities(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicUserResourceApi.getAuthorities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PublicUserResourceApi - factory interface
 * @export
 */
export const PublicUserResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicUserResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublicUsers(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<UserDTO>> {
            return localVarFp.getAllPublicUsers(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorities(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getAuthorities(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicUserResourceApi - object-oriented interface
 * @export
 * @class PublicUserResourceApi
 * @extends {BaseAPI}
 */
export class PublicUserResourceApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicUserResourceApi
     */
    public getAllPublicUsers(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return PublicUserResourceApiFp(this.configuration).getAllPublicUsers(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicUserResourceApi
     */
    public getAuthorities(options?: RawAxiosRequestConfig) {
        return PublicUserResourceApiFp(this.configuration).getAuthorities(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScheduleInputOrderResourceApi - axios parameter creator
 * @export
 */
export const ScheduleInputOrderResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ScheduleInputOrderDTO} scheduleInputOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScheduleInputOrder: async (scheduleInputOrderDTO: ScheduleInputOrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleInputOrderDTO' is not null or undefined
            assertParamExists('createScheduleInputOrder', 'scheduleInputOrderDTO', scheduleInputOrderDTO)
            const localVarPath = `/api/schedule-input-orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleInputOrderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduleInputOrder: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteScheduleInputOrder', 'id', id)
            const localVarPath = `/api/schedule-input-orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllScheduleInputOrders: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schedule-input-orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduleInputOrder: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getScheduleInputOrder', 'id', id)
            const localVarPath = `/api/schedule-input-orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputOrderDTO} scheduleInputOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateScheduleInputOrder: async (id: number, scheduleInputOrderDTO: ScheduleInputOrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateScheduleInputOrder', 'id', id)
            // verify required parameter 'scheduleInputOrderDTO' is not null or undefined
            assertParamExists('partialUpdateScheduleInputOrder', 'scheduleInputOrderDTO', scheduleInputOrderDTO)
            const localVarPath = `/api/schedule-input-orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleInputOrderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputOrderDTO} scheduleInputOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduleInputOrder: async (id: number, scheduleInputOrderDTO: ScheduleInputOrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateScheduleInputOrder', 'id', id)
            // verify required parameter 'scheduleInputOrderDTO' is not null or undefined
            assertParamExists('updateScheduleInputOrder', 'scheduleInputOrderDTO', scheduleInputOrderDTO)
            const localVarPath = `/api/schedule-input-orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleInputOrderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleInputOrderResourceApi - functional programming interface
 * @export
 */
export const ScheduleInputOrderResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleInputOrderResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ScheduleInputOrderDTO} scheduleInputOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createScheduleInputOrder(scheduleInputOrderDTO: ScheduleInputOrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInputOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createScheduleInputOrder(scheduleInputOrderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputOrderResourceApi.createScheduleInputOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScheduleInputOrder(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScheduleInputOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputOrderResourceApi.deleteScheduleInputOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllScheduleInputOrders(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScheduleInputOrderDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllScheduleInputOrders(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputOrderResourceApi.getAllScheduleInputOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduleInputOrder(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInputOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScheduleInputOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputOrderResourceApi.getScheduleInputOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputOrderDTO} scheduleInputOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateScheduleInputOrder(id: number, scheduleInputOrderDTO: ScheduleInputOrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInputOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateScheduleInputOrder(id, scheduleInputOrderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputOrderResourceApi.partialUpdateScheduleInputOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputOrderDTO} scheduleInputOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScheduleInputOrder(id: number, scheduleInputOrderDTO: ScheduleInputOrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInputOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScheduleInputOrder(id, scheduleInputOrderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputOrderResourceApi.updateScheduleInputOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ScheduleInputOrderResourceApi - factory interface
 * @export
 */
export const ScheduleInputOrderResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleInputOrderResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {ScheduleInputOrderDTO} scheduleInputOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScheduleInputOrder(scheduleInputOrderDTO: ScheduleInputOrderDTO, options?: any): AxiosPromise<ScheduleInputOrderDTO> {
            return localVarFp.createScheduleInputOrder(scheduleInputOrderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduleInputOrder(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteScheduleInputOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllScheduleInputOrders(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<ScheduleInputOrderDTO>> {
            return localVarFp.getAllScheduleInputOrders(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduleInputOrder(id: number, options?: any): AxiosPromise<ScheduleInputOrderDTO> {
            return localVarFp.getScheduleInputOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputOrderDTO} scheduleInputOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateScheduleInputOrder(id: number, scheduleInputOrderDTO: ScheduleInputOrderDTO, options?: any): AxiosPromise<ScheduleInputOrderDTO> {
            return localVarFp.partialUpdateScheduleInputOrder(id, scheduleInputOrderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputOrderDTO} scheduleInputOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduleInputOrder(id: number, scheduleInputOrderDTO: ScheduleInputOrderDTO, options?: any): AxiosPromise<ScheduleInputOrderDTO> {
            return localVarFp.updateScheduleInputOrder(id, scheduleInputOrderDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleInputOrderResourceApi - object-oriented interface
 * @export
 * @class ScheduleInputOrderResourceApi
 * @extends {BaseAPI}
 */
export class ScheduleInputOrderResourceApi extends BaseAPI {
    /**
     * 
     * @param {ScheduleInputOrderDTO} scheduleInputOrderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputOrderResourceApi
     */
    public createScheduleInputOrder(scheduleInputOrderDTO: ScheduleInputOrderDTO, options?: RawAxiosRequestConfig) {
        return ScheduleInputOrderResourceApiFp(this.configuration).createScheduleInputOrder(scheduleInputOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputOrderResourceApi
     */
    public deleteScheduleInputOrder(id: number, options?: RawAxiosRequestConfig) {
        return ScheduleInputOrderResourceApiFp(this.configuration).deleteScheduleInputOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputOrderResourceApi
     */
    public getAllScheduleInputOrders(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return ScheduleInputOrderResourceApiFp(this.configuration).getAllScheduleInputOrders(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputOrderResourceApi
     */
    public getScheduleInputOrder(id: number, options?: RawAxiosRequestConfig) {
        return ScheduleInputOrderResourceApiFp(this.configuration).getScheduleInputOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ScheduleInputOrderDTO} scheduleInputOrderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputOrderResourceApi
     */
    public partialUpdateScheduleInputOrder(id: number, scheduleInputOrderDTO: ScheduleInputOrderDTO, options?: RawAxiosRequestConfig) {
        return ScheduleInputOrderResourceApiFp(this.configuration).partialUpdateScheduleInputOrder(id, scheduleInputOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ScheduleInputOrderDTO} scheduleInputOrderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputOrderResourceApi
     */
    public updateScheduleInputOrder(id: number, scheduleInputOrderDTO: ScheduleInputOrderDTO, options?: RawAxiosRequestConfig) {
        return ScheduleInputOrderResourceApiFp(this.configuration).updateScheduleInputOrder(id, scheduleInputOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScheduleInputResourceApi - axios parameter creator
 * @export
 */
export const ScheduleInputResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ScheduleInputDTO} scheduleInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScheduleInput: async (scheduleInputDTO: ScheduleInputDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleInputDTO' is not null or undefined
            assertParamExists('createScheduleInput', 'scheduleInputDTO', scheduleInputDTO)
            const localVarPath = `/api/schedule-inputs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleInputDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduleInput: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteScheduleInput', 'id', id)
            const localVarPath = `/api/schedule-inputs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllScheduleInputs: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schedule-inputs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduleInput: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getScheduleInput', 'id', id)
            const localVarPath = `/api/schedule-inputs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputDTO} scheduleInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateScheduleInput: async (id: number, scheduleInputDTO: ScheduleInputDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateScheduleInput', 'id', id)
            // verify required parameter 'scheduleInputDTO' is not null or undefined
            assertParamExists('partialUpdateScheduleInput', 'scheduleInputDTO', scheduleInputDTO)
            const localVarPath = `/api/schedule-inputs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleInputDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputDTO} scheduleInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduleInput: async (id: number, scheduleInputDTO: ScheduleInputDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateScheduleInput', 'id', id)
            // verify required parameter 'scheduleInputDTO' is not null or undefined
            assertParamExists('updateScheduleInput', 'scheduleInputDTO', scheduleInputDTO)
            const localVarPath = `/api/schedule-inputs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleInputDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleInputResourceApi - functional programming interface
 * @export
 */
export const ScheduleInputResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleInputResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ScheduleInputDTO} scheduleInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createScheduleInput(scheduleInputDTO: ScheduleInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createScheduleInput(scheduleInputDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputResourceApi.createScheduleInput']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScheduleInput(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScheduleInput(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputResourceApi.deleteScheduleInput']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllScheduleInputs(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScheduleInputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllScheduleInputs(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputResourceApi.getAllScheduleInputs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduleInput(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScheduleInput(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputResourceApi.getScheduleInput']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputDTO} scheduleInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateScheduleInput(id: number, scheduleInputDTO: ScheduleInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateScheduleInput(id, scheduleInputDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputResourceApi.partialUpdateScheduleInput']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputDTO} scheduleInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScheduleInput(id: number, scheduleInputDTO: ScheduleInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScheduleInput(id, scheduleInputDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputResourceApi.updateScheduleInput']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ScheduleInputResourceApi - factory interface
 * @export
 */
export const ScheduleInputResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleInputResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {ScheduleInputDTO} scheduleInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScheduleInput(scheduleInputDTO: ScheduleInputDTO, options?: any): AxiosPromise<ScheduleInputDTO> {
            return localVarFp.createScheduleInput(scheduleInputDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduleInput(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteScheduleInput(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllScheduleInputs(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<ScheduleInputDTO>> {
            return localVarFp.getAllScheduleInputs(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduleInput(id: number, options?: any): AxiosPromise<ScheduleInputDTO> {
            return localVarFp.getScheduleInput(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputDTO} scheduleInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateScheduleInput(id: number, scheduleInputDTO: ScheduleInputDTO, options?: any): AxiosPromise<ScheduleInputDTO> {
            return localVarFp.partialUpdateScheduleInput(id, scheduleInputDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputDTO} scheduleInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduleInput(id: number, scheduleInputDTO: ScheduleInputDTO, options?: any): AxiosPromise<ScheduleInputDTO> {
            return localVarFp.updateScheduleInput(id, scheduleInputDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleInputResourceApi - object-oriented interface
 * @export
 * @class ScheduleInputResourceApi
 * @extends {BaseAPI}
 */
export class ScheduleInputResourceApi extends BaseAPI {
    /**
     * 
     * @param {ScheduleInputDTO} scheduleInputDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputResourceApi
     */
    public createScheduleInput(scheduleInputDTO: ScheduleInputDTO, options?: RawAxiosRequestConfig) {
        return ScheduleInputResourceApiFp(this.configuration).createScheduleInput(scheduleInputDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputResourceApi
     */
    public deleteScheduleInput(id: number, options?: RawAxiosRequestConfig) {
        return ScheduleInputResourceApiFp(this.configuration).deleteScheduleInput(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputResourceApi
     */
    public getAllScheduleInputs(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return ScheduleInputResourceApiFp(this.configuration).getAllScheduleInputs(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputResourceApi
     */
    public getScheduleInput(id: number, options?: RawAxiosRequestConfig) {
        return ScheduleInputResourceApiFp(this.configuration).getScheduleInput(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ScheduleInputDTO} scheduleInputDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputResourceApi
     */
    public partialUpdateScheduleInput(id: number, scheduleInputDTO: ScheduleInputDTO, options?: RawAxiosRequestConfig) {
        return ScheduleInputResourceApiFp(this.configuration).partialUpdateScheduleInput(id, scheduleInputDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ScheduleInputDTO} scheduleInputDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputResourceApi
     */
    public updateScheduleInput(id: number, scheduleInputDTO: ScheduleInputDTO, options?: RawAxiosRequestConfig) {
        return ScheduleInputResourceApiFp(this.configuration).updateScheduleInput(id, scheduleInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScheduleInputVehicleResourceApi - axios parameter creator
 * @export
 */
export const ScheduleInputVehicleResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ScheduleInputVehicleDTO} scheduleInputVehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScheduleInputVehicle: async (scheduleInputVehicleDTO: ScheduleInputVehicleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleInputVehicleDTO' is not null or undefined
            assertParamExists('createScheduleInputVehicle', 'scheduleInputVehicleDTO', scheduleInputVehicleDTO)
            const localVarPath = `/api/schedule-input-vehicles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleInputVehicleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduleInputVehicle: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteScheduleInputVehicle', 'id', id)
            const localVarPath = `/api/schedule-input-vehicles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllScheduleInputVehicles: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schedule-input-vehicles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduleInputVehicle: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getScheduleInputVehicle', 'id', id)
            const localVarPath = `/api/schedule-input-vehicles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputVehicleDTO} scheduleInputVehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateScheduleInputVehicle: async (id: number, scheduleInputVehicleDTO: ScheduleInputVehicleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateScheduleInputVehicle', 'id', id)
            // verify required parameter 'scheduleInputVehicleDTO' is not null or undefined
            assertParamExists('partialUpdateScheduleInputVehicle', 'scheduleInputVehicleDTO', scheduleInputVehicleDTO)
            const localVarPath = `/api/schedule-input-vehicles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleInputVehicleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputVehicleDTO} scheduleInputVehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduleInputVehicle: async (id: number, scheduleInputVehicleDTO: ScheduleInputVehicleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateScheduleInputVehicle', 'id', id)
            // verify required parameter 'scheduleInputVehicleDTO' is not null or undefined
            assertParamExists('updateScheduleInputVehicle', 'scheduleInputVehicleDTO', scheduleInputVehicleDTO)
            const localVarPath = `/api/schedule-input-vehicles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleInputVehicleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleInputVehicleResourceApi - functional programming interface
 * @export
 */
export const ScheduleInputVehicleResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleInputVehicleResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ScheduleInputVehicleDTO} scheduleInputVehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createScheduleInputVehicle(scheduleInputVehicleDTO: ScheduleInputVehicleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInputVehicleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createScheduleInputVehicle(scheduleInputVehicleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputVehicleResourceApi.createScheduleInputVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScheduleInputVehicle(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScheduleInputVehicle(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputVehicleResourceApi.deleteScheduleInputVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllScheduleInputVehicles(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScheduleInputVehicleDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllScheduleInputVehicles(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputVehicleResourceApi.getAllScheduleInputVehicles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduleInputVehicle(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInputVehicleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScheduleInputVehicle(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputVehicleResourceApi.getScheduleInputVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputVehicleDTO} scheduleInputVehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateScheduleInputVehicle(id: number, scheduleInputVehicleDTO: ScheduleInputVehicleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInputVehicleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateScheduleInputVehicle(id, scheduleInputVehicleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputVehicleResourceApi.partialUpdateScheduleInputVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputVehicleDTO} scheduleInputVehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScheduleInputVehicle(id: number, scheduleInputVehicleDTO: ScheduleInputVehicleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInputVehicleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScheduleInputVehicle(id, scheduleInputVehicleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleInputVehicleResourceApi.updateScheduleInputVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ScheduleInputVehicleResourceApi - factory interface
 * @export
 */
export const ScheduleInputVehicleResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleInputVehicleResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {ScheduleInputVehicleDTO} scheduleInputVehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScheduleInputVehicle(scheduleInputVehicleDTO: ScheduleInputVehicleDTO, options?: any): AxiosPromise<ScheduleInputVehicleDTO> {
            return localVarFp.createScheduleInputVehicle(scheduleInputVehicleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduleInputVehicle(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteScheduleInputVehicle(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllScheduleInputVehicles(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<ScheduleInputVehicleDTO>> {
            return localVarFp.getAllScheduleInputVehicles(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduleInputVehicle(id: number, options?: any): AxiosPromise<ScheduleInputVehicleDTO> {
            return localVarFp.getScheduleInputVehicle(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputVehicleDTO} scheduleInputVehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateScheduleInputVehicle(id: number, scheduleInputVehicleDTO: ScheduleInputVehicleDTO, options?: any): AxiosPromise<ScheduleInputVehicleDTO> {
            return localVarFp.partialUpdateScheduleInputVehicle(id, scheduleInputVehicleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleInputVehicleDTO} scheduleInputVehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduleInputVehicle(id: number, scheduleInputVehicleDTO: ScheduleInputVehicleDTO, options?: any): AxiosPromise<ScheduleInputVehicleDTO> {
            return localVarFp.updateScheduleInputVehicle(id, scheduleInputVehicleDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleInputVehicleResourceApi - object-oriented interface
 * @export
 * @class ScheduleInputVehicleResourceApi
 * @extends {BaseAPI}
 */
export class ScheduleInputVehicleResourceApi extends BaseAPI {
    /**
     * 
     * @param {ScheduleInputVehicleDTO} scheduleInputVehicleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputVehicleResourceApi
     */
    public createScheduleInputVehicle(scheduleInputVehicleDTO: ScheduleInputVehicleDTO, options?: RawAxiosRequestConfig) {
        return ScheduleInputVehicleResourceApiFp(this.configuration).createScheduleInputVehicle(scheduleInputVehicleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputVehicleResourceApi
     */
    public deleteScheduleInputVehicle(id: number, options?: RawAxiosRequestConfig) {
        return ScheduleInputVehicleResourceApiFp(this.configuration).deleteScheduleInputVehicle(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputVehicleResourceApi
     */
    public getAllScheduleInputVehicles(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return ScheduleInputVehicleResourceApiFp(this.configuration).getAllScheduleInputVehicles(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputVehicleResourceApi
     */
    public getScheduleInputVehicle(id: number, options?: RawAxiosRequestConfig) {
        return ScheduleInputVehicleResourceApiFp(this.configuration).getScheduleInputVehicle(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ScheduleInputVehicleDTO} scheduleInputVehicleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputVehicleResourceApi
     */
    public partialUpdateScheduleInputVehicle(id: number, scheduleInputVehicleDTO: ScheduleInputVehicleDTO, options?: RawAxiosRequestConfig) {
        return ScheduleInputVehicleResourceApiFp(this.configuration).partialUpdateScheduleInputVehicle(id, scheduleInputVehicleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ScheduleInputVehicleDTO} scheduleInputVehicleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleInputVehicleResourceApi
     */
    public updateScheduleInputVehicle(id: number, scheduleInputVehicleDTO: ScheduleInputVehicleDTO, options?: RawAxiosRequestConfig) {
        return ScheduleInputVehicleResourceApiFp(this.configuration).updateScheduleInputVehicle(id, scheduleInputVehicleDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScheduleResourceApi - axios parameter creator
 * @export
 */
export const ScheduleResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ScheduleDTO} scheduleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchedule: async (scheduleDTO: ScheduleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleDTO' is not null or undefined
            assertParamExists('createSchedule', 'scheduleDTO', scheduleDTO)
            const localVarPath = `/api/schedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchedule: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSchedule', 'id', id)
            const localVarPath = `/api/schedules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchedules: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedule: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSchedule', 'id', id)
            const localVarPath = `/api/schedules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleDTO} scheduleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSchedule: async (id: number, scheduleDTO: ScheduleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateSchedule', 'id', id)
            // verify required parameter 'scheduleDTO' is not null or undefined
            assertParamExists('partialUpdateSchedule', 'scheduleDTO', scheduleDTO)
            const localVarPath = `/api/schedules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleDTO} scheduleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule: async (id: number, scheduleDTO: ScheduleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSchedule', 'id', id)
            // verify required parameter 'scheduleDTO' is not null or undefined
            assertParamExists('updateSchedule', 'scheduleDTO', scheduleDTO)
            const localVarPath = `/api/schedules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} coordinateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduleCoordinateToNull: async (coordinateId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coordinateId' is not null or undefined
            assertParamExists('updateScheduleCoordinateToNull', 'coordinateId', coordinateId)
            const localVarPath = `/api/{coordinateId}/schedules/tonull`
                .replace(`{${"coordinateId"}}`, encodeURIComponent(String(coordinateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleResourceApi - functional programming interface
 * @export
 */
export const ScheduleResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ScheduleDTO} scheduleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSchedule(scheduleDTO: ScheduleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSchedule(scheduleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleResourceApi.createSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSchedule(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSchedule(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleResourceApi.deleteSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSchedules(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScheduleDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSchedules(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleResourceApi.getAllSchedules']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchedule(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchedule(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleResourceApi.getSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleDTO} scheduleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateSchedule(id: number, scheduleDTO: ScheduleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateSchedule(id, scheduleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleResourceApi.partialUpdateSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleDTO} scheduleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSchedule(id: number, scheduleDTO: ScheduleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchedule(id, scheduleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleResourceApi.updateSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} coordinateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScheduleCoordinateToNull(coordinateId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScheduleCoordinateToNull(coordinateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleResourceApi.updateScheduleCoordinateToNull']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ScheduleResourceApi - factory interface
 * @export
 */
export const ScheduleResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {ScheduleDTO} scheduleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchedule(scheduleDTO: ScheduleDTO, options?: any): AxiosPromise<ScheduleDTO> {
            return localVarFp.createSchedule(scheduleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchedule(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSchedule(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchedules(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<ScheduleDTO>> {
            return localVarFp.getAllSchedules(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedule(id: number, options?: any): AxiosPromise<ScheduleDTO> {
            return localVarFp.getSchedule(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleDTO} scheduleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSchedule(id: number, scheduleDTO: ScheduleDTO, options?: any): AxiosPromise<ScheduleDTO> {
            return localVarFp.partialUpdateSchedule(id, scheduleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ScheduleDTO} scheduleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule(id: number, scheduleDTO: ScheduleDTO, options?: any): AxiosPromise<ScheduleDTO> {
            return localVarFp.updateSchedule(id, scheduleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} coordinateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduleCoordinateToNull(coordinateId: number, options?: any): AxiosPromise<void> {
            return localVarFp.updateScheduleCoordinateToNull(coordinateId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleResourceApi - object-oriented interface
 * @export
 * @class ScheduleResourceApi
 * @extends {BaseAPI}
 */
export class ScheduleResourceApi extends BaseAPI {
    /**
     * 
     * @param {ScheduleDTO} scheduleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleResourceApi
     */
    public createSchedule(scheduleDTO: ScheduleDTO, options?: RawAxiosRequestConfig) {
        return ScheduleResourceApiFp(this.configuration).createSchedule(scheduleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleResourceApi
     */
    public deleteSchedule(id: number, options?: RawAxiosRequestConfig) {
        return ScheduleResourceApiFp(this.configuration).deleteSchedule(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleResourceApi
     */
    public getAllSchedules(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return ScheduleResourceApiFp(this.configuration).getAllSchedules(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleResourceApi
     */
    public getSchedule(id: number, options?: RawAxiosRequestConfig) {
        return ScheduleResourceApiFp(this.configuration).getSchedule(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ScheduleDTO} scheduleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleResourceApi
     */
    public partialUpdateSchedule(id: number, scheduleDTO: ScheduleDTO, options?: RawAxiosRequestConfig) {
        return ScheduleResourceApiFp(this.configuration).partialUpdateSchedule(id, scheduleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ScheduleDTO} scheduleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleResourceApi
     */
    public updateSchedule(id: number, scheduleDTO: ScheduleDTO, options?: RawAxiosRequestConfig) {
        return ScheduleResourceApiFp(this.configuration).updateSchedule(id, scheduleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} coordinateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleResourceApi
     */
    public updateScheduleCoordinateToNull(coordinateId: number, options?: RawAxiosRequestConfig) {
        return ScheduleResourceApiFp(this.configuration).updateScheduleCoordinateToNull(coordinateId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SearchResourceApi - axios parameter creator
 * @export
 */
export const SearchResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} entityName 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntities: async (entityName: string, pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityName' is not null or undefined
            assertParamExists('getAllEntities', 'entityName', entityName)
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getAllEntities', 'pageable', pageable)
            const localVarPath = `/api/search/getAll/{entityName}`
                .replace(`{${"entityName"}}`, encodeURIComponent(String(entityName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} entityName 
         * @param {Pageable} pageable 
         * @param {string} [keyword] 
         * @param {Array<SearchCriteria>} [searchCriteria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByAttributesAndKeyword: async (entityName: string, pageable: Pageable, keyword?: string, searchCriteria?: Array<SearchCriteria>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityName' is not null or undefined
            assertParamExists('searchByAttributesAndKeyword', 'entityName', entityName)
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('searchByAttributesAndKeyword', 'pageable', pageable)
            const localVarPath = `/api/searchByAttributesAndKeyword/{entityName}`
                .replace(`{${"entityName"}}`, encodeURIComponent(String(entityName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchCriteria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchResourceApi - functional programming interface
 * @export
 */
export const SearchResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} entityName 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntities(entityName: string, pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntities(entityName, pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SearchResourceApi.getAllEntities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} entityName 
         * @param {Pageable} pageable 
         * @param {string} [keyword] 
         * @param {Array<SearchCriteria>} [searchCriteria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchByAttributesAndKeyword(entityName: string, pageable: Pageable, keyword?: string, searchCriteria?: Array<SearchCriteria>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchByAttributesAndKeyword(entityName, pageable, keyword, searchCriteria, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SearchResourceApi.searchByAttributesAndKeyword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SearchResourceApi - factory interface
 * @export
 */
export const SearchResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} entityName 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntities(entityName: string, pageable: Pageable, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getAllEntities(entityName, pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} entityName 
         * @param {Pageable} pageable 
         * @param {string} [keyword] 
         * @param {Array<SearchCriteria>} [searchCriteria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByAttributesAndKeyword(entityName: string, pageable: Pageable, keyword?: string, searchCriteria?: Array<SearchCriteria>, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.searchByAttributesAndKeyword(entityName, pageable, keyword, searchCriteria, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchResourceApi - object-oriented interface
 * @export
 * @class SearchResourceApi
 * @extends {BaseAPI}
 */
export class SearchResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} entityName 
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchResourceApi
     */
    public getAllEntities(entityName: string, pageable: Pageable, options?: RawAxiosRequestConfig) {
        return SearchResourceApiFp(this.configuration).getAllEntities(entityName, pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} entityName 
     * @param {Pageable} pageable 
     * @param {string} [keyword] 
     * @param {Array<SearchCriteria>} [searchCriteria] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchResourceApi
     */
    public searchByAttributesAndKeyword(entityName: string, pageable: Pageable, keyword?: string, searchCriteria?: Array<SearchCriteria>, options?: RawAxiosRequestConfig) {
        return SearchResourceApiFp(this.configuration).searchByAttributesAndKeyword(entityName, pageable, keyword, searchCriteria, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SolutionResourceApi - axios parameter creator
 * @export
 */
export const SolutionResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SolutionDTO} solutionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolution: async (solutionDTO: SolutionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'solutionDTO' is not null or undefined
            assertParamExists('createSolution', 'solutionDTO', solutionDTO)
            const localVarPath = `/api/solutions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolution: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSolution', 'id', id)
            const localVarPath = `/api/solutions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutions: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/solutions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolution: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSolution', 'id', id)
            const localVarPath = `/api/solutions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionDTO} solutionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolution: async (id: number, solutionDTO: SolutionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateSolution', 'id', id)
            // verify required parameter 'solutionDTO' is not null or undefined
            assertParamExists('partialUpdateSolution', 'solutionDTO', solutionDTO)
            const localVarPath = `/api/solutions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionDTO} solutionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolution: async (id: number, solutionDTO: SolutionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSolution', 'id', id)
            // verify required parameter 'solutionDTO' is not null or undefined
            assertParamExists('updateSolution', 'solutionDTO', solutionDTO)
            const localVarPath = `/api/solutions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SolutionResourceApi - functional programming interface
 * @export
 */
export const SolutionResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SolutionResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SolutionDTO} solutionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSolution(solutionDTO: SolutionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSolution(solutionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionResourceApi.createSolution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSolution(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSolution(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionResourceApi.deleteSolution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSolutions(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SolutionDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSolutions(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionResourceApi.getAllSolutions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolution(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolution(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionResourceApi.getSolution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionDTO} solutionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateSolution(id: number, solutionDTO: SolutionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateSolution(id, solutionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionResourceApi.partialUpdateSolution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionDTO} solutionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSolution(id: number, solutionDTO: SolutionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSolution(id, solutionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionResourceApi.updateSolution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SolutionResourceApi - factory interface
 * @export
 */
export const SolutionResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SolutionResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {SolutionDTO} solutionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolution(solutionDTO: SolutionDTO, options?: any): AxiosPromise<SolutionDTO> {
            return localVarFp.createSolution(solutionDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolution(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSolution(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutions(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<SolutionDTO>> {
            return localVarFp.getAllSolutions(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolution(id: number, options?: any): AxiosPromise<SolutionDTO> {
            return localVarFp.getSolution(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionDTO} solutionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolution(id: number, solutionDTO: SolutionDTO, options?: any): AxiosPromise<SolutionDTO> {
            return localVarFp.partialUpdateSolution(id, solutionDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionDTO} solutionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolution(id: number, solutionDTO: SolutionDTO, options?: any): AxiosPromise<SolutionDTO> {
            return localVarFp.updateSolution(id, solutionDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SolutionResourceApi - object-oriented interface
 * @export
 * @class SolutionResourceApi
 * @extends {BaseAPI}
 */
export class SolutionResourceApi extends BaseAPI {
    /**
     * 
     * @param {SolutionDTO} solutionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionResourceApi
     */
    public createSolution(solutionDTO: SolutionDTO, options?: RawAxiosRequestConfig) {
        return SolutionResourceApiFp(this.configuration).createSolution(solutionDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionResourceApi
     */
    public deleteSolution(id: number, options?: RawAxiosRequestConfig) {
        return SolutionResourceApiFp(this.configuration).deleteSolution(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionResourceApi
     */
    public getAllSolutions(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return SolutionResourceApiFp(this.configuration).getAllSolutions(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionResourceApi
     */
    public getSolution(id: number, options?: RawAxiosRequestConfig) {
        return SolutionResourceApiFp(this.configuration).getSolution(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionDTO} solutionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionResourceApi
     */
    public partialUpdateSolution(id: number, solutionDTO: SolutionDTO, options?: RawAxiosRequestConfig) {
        return SolutionResourceApiFp(this.configuration).partialUpdateSolution(id, solutionDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionDTO} solutionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionResourceApi
     */
    public updateSolution(id: number, solutionDTO: SolutionDTO, options?: RawAxiosRequestConfig) {
        return SolutionResourceApiFp(this.configuration).updateSolution(id, solutionDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SolutionSummaryResourceApi - axios parameter creator
 * @export
 */
export const SolutionSummaryResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SolutionSummaryDTO} solutionSummaryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolutionSummary: async (solutionSummaryDTO: SolutionSummaryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'solutionSummaryDTO' is not null or undefined
            assertParamExists('createSolutionSummary', 'solutionSummaryDTO', solutionSummaryDTO)
            const localVarPath = `/api/solution-summaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionSummaryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolutionSummary: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSolutionSummary', 'id', id)
            const localVarPath = `/api/solution-summaries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutionSummaries: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/solution-summaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolutionSummary: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSolutionSummary', 'id', id)
            const localVarPath = `/api/solution-summaries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionSummaryDTO} solutionSummaryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolutionSummary: async (id: number, solutionSummaryDTO: SolutionSummaryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateSolutionSummary', 'id', id)
            // verify required parameter 'solutionSummaryDTO' is not null or undefined
            assertParamExists('partialUpdateSolutionSummary', 'solutionSummaryDTO', solutionSummaryDTO)
            const localVarPath = `/api/solution-summaries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionSummaryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionSummaryDTO} solutionSummaryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolutionSummary: async (id: number, solutionSummaryDTO: SolutionSummaryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSolutionSummary', 'id', id)
            // verify required parameter 'solutionSummaryDTO' is not null or undefined
            assertParamExists('updateSolutionSummary', 'solutionSummaryDTO', solutionSummaryDTO)
            const localVarPath = `/api/solution-summaries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionSummaryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SolutionSummaryResourceApi - functional programming interface
 * @export
 */
export const SolutionSummaryResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SolutionSummaryResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SolutionSummaryDTO} solutionSummaryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSolutionSummary(solutionSummaryDTO: SolutionSummaryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionSummaryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSolutionSummary(solutionSummaryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionSummaryResourceApi.createSolutionSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSolutionSummary(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSolutionSummary(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionSummaryResourceApi.deleteSolutionSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSolutionSummaries(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SolutionSummaryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSolutionSummaries(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionSummaryResourceApi.getAllSolutionSummaries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolutionSummary(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionSummaryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolutionSummary(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionSummaryResourceApi.getSolutionSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionSummaryDTO} solutionSummaryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateSolutionSummary(id: number, solutionSummaryDTO: SolutionSummaryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionSummaryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateSolutionSummary(id, solutionSummaryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionSummaryResourceApi.partialUpdateSolutionSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionSummaryDTO} solutionSummaryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSolutionSummary(id: number, solutionSummaryDTO: SolutionSummaryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionSummaryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSolutionSummary(id, solutionSummaryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionSummaryResourceApi.updateSolutionSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SolutionSummaryResourceApi - factory interface
 * @export
 */
export const SolutionSummaryResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SolutionSummaryResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {SolutionSummaryDTO} solutionSummaryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolutionSummary(solutionSummaryDTO: SolutionSummaryDTO, options?: any): AxiosPromise<SolutionSummaryDTO> {
            return localVarFp.createSolutionSummary(solutionSummaryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolutionSummary(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSolutionSummary(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutionSummaries(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<SolutionSummaryDTO>> {
            return localVarFp.getAllSolutionSummaries(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolutionSummary(id: number, options?: any): AxiosPromise<SolutionSummaryDTO> {
            return localVarFp.getSolutionSummary(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionSummaryDTO} solutionSummaryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolutionSummary(id: number, solutionSummaryDTO: SolutionSummaryDTO, options?: any): AxiosPromise<SolutionSummaryDTO> {
            return localVarFp.partialUpdateSolutionSummary(id, solutionSummaryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionSummaryDTO} solutionSummaryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolutionSummary(id: number, solutionSummaryDTO: SolutionSummaryDTO, options?: any): AxiosPromise<SolutionSummaryDTO> {
            return localVarFp.updateSolutionSummary(id, solutionSummaryDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SolutionSummaryResourceApi - object-oriented interface
 * @export
 * @class SolutionSummaryResourceApi
 * @extends {BaseAPI}
 */
export class SolutionSummaryResourceApi extends BaseAPI {
    /**
     * 
     * @param {SolutionSummaryDTO} solutionSummaryDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionSummaryResourceApi
     */
    public createSolutionSummary(solutionSummaryDTO: SolutionSummaryDTO, options?: RawAxiosRequestConfig) {
        return SolutionSummaryResourceApiFp(this.configuration).createSolutionSummary(solutionSummaryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionSummaryResourceApi
     */
    public deleteSolutionSummary(id: number, options?: RawAxiosRequestConfig) {
        return SolutionSummaryResourceApiFp(this.configuration).deleteSolutionSummary(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionSummaryResourceApi
     */
    public getAllSolutionSummaries(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return SolutionSummaryResourceApiFp(this.configuration).getAllSolutionSummaries(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionSummaryResourceApi
     */
    public getSolutionSummary(id: number, options?: RawAxiosRequestConfig) {
        return SolutionSummaryResourceApiFp(this.configuration).getSolutionSummary(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionSummaryDTO} solutionSummaryDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionSummaryResourceApi
     */
    public partialUpdateSolutionSummary(id: number, solutionSummaryDTO: SolutionSummaryDTO, options?: RawAxiosRequestConfig) {
        return SolutionSummaryResourceApiFp(this.configuration).partialUpdateSolutionSummary(id, solutionSummaryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionSummaryDTO} solutionSummaryDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionSummaryResourceApi
     */
    public updateSolutionSummary(id: number, solutionSummaryDTO: SolutionSummaryDTO, options?: RawAxiosRequestConfig) {
        return SolutionSummaryResourceApiFp(this.configuration).updateSolutionSummary(id, solutionSummaryDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SolutionTripOrderResourceApi - axios parameter creator
 * @export
 */
export const SolutionTripOrderResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SolutionTripOrderDTO} solutionTripOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolutionTripOrder: async (solutionTripOrderDTO: SolutionTripOrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'solutionTripOrderDTO' is not null or undefined
            assertParamExists('createSolutionTripOrder', 'solutionTripOrderDTO', solutionTripOrderDTO)
            const localVarPath = `/api/solution-trip-orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionTripOrderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolutionTripOrder: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSolutionTripOrder', 'id', id)
            const localVarPath = `/api/solution-trip-orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutionTripOrders: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/solution-trip-orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolutionTripOrder: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSolutionTripOrder', 'id', id)
            const localVarPath = `/api/solution-trip-orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripOrderDTO} solutionTripOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolutionTripOrder: async (id: number, solutionTripOrderDTO: SolutionTripOrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateSolutionTripOrder', 'id', id)
            // verify required parameter 'solutionTripOrderDTO' is not null or undefined
            assertParamExists('partialUpdateSolutionTripOrder', 'solutionTripOrderDTO', solutionTripOrderDTO)
            const localVarPath = `/api/solution-trip-orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionTripOrderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripOrderDTO} solutionTripOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolutionTripOrder: async (id: number, solutionTripOrderDTO: SolutionTripOrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSolutionTripOrder', 'id', id)
            // verify required parameter 'solutionTripOrderDTO' is not null or undefined
            assertParamExists('updateSolutionTripOrder', 'solutionTripOrderDTO', solutionTripOrderDTO)
            const localVarPath = `/api/solution-trip-orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionTripOrderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SolutionTripOrderResourceApi - functional programming interface
 * @export
 */
export const SolutionTripOrderResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SolutionTripOrderResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SolutionTripOrderDTO} solutionTripOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSolutionTripOrder(solutionTripOrderDTO: SolutionTripOrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSolutionTripOrder(solutionTripOrderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripOrderResourceApi.createSolutionTripOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSolutionTripOrder(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSolutionTripOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripOrderResourceApi.deleteSolutionTripOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSolutionTripOrders(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SolutionTripOrderDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSolutionTripOrders(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripOrderResourceApi.getAllSolutionTripOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolutionTripOrder(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolutionTripOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripOrderResourceApi.getSolutionTripOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripOrderDTO} solutionTripOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateSolutionTripOrder(id: number, solutionTripOrderDTO: SolutionTripOrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateSolutionTripOrder(id, solutionTripOrderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripOrderResourceApi.partialUpdateSolutionTripOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripOrderDTO} solutionTripOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSolutionTripOrder(id: number, solutionTripOrderDTO: SolutionTripOrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSolutionTripOrder(id, solutionTripOrderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripOrderResourceApi.updateSolutionTripOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SolutionTripOrderResourceApi - factory interface
 * @export
 */
export const SolutionTripOrderResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SolutionTripOrderResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {SolutionTripOrderDTO} solutionTripOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolutionTripOrder(solutionTripOrderDTO: SolutionTripOrderDTO, options?: any): AxiosPromise<SolutionTripOrderDTO> {
            return localVarFp.createSolutionTripOrder(solutionTripOrderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolutionTripOrder(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSolutionTripOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutionTripOrders(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<SolutionTripOrderDTO>> {
            return localVarFp.getAllSolutionTripOrders(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolutionTripOrder(id: number, options?: any): AxiosPromise<SolutionTripOrderDTO> {
            return localVarFp.getSolutionTripOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripOrderDTO} solutionTripOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolutionTripOrder(id: number, solutionTripOrderDTO: SolutionTripOrderDTO, options?: any): AxiosPromise<SolutionTripOrderDTO> {
            return localVarFp.partialUpdateSolutionTripOrder(id, solutionTripOrderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripOrderDTO} solutionTripOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolutionTripOrder(id: number, solutionTripOrderDTO: SolutionTripOrderDTO, options?: any): AxiosPromise<SolutionTripOrderDTO> {
            return localVarFp.updateSolutionTripOrder(id, solutionTripOrderDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SolutionTripOrderResourceApi - object-oriented interface
 * @export
 * @class SolutionTripOrderResourceApi
 * @extends {BaseAPI}
 */
export class SolutionTripOrderResourceApi extends BaseAPI {
    /**
     * 
     * @param {SolutionTripOrderDTO} solutionTripOrderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripOrderResourceApi
     */
    public createSolutionTripOrder(solutionTripOrderDTO: SolutionTripOrderDTO, options?: RawAxiosRequestConfig) {
        return SolutionTripOrderResourceApiFp(this.configuration).createSolutionTripOrder(solutionTripOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripOrderResourceApi
     */
    public deleteSolutionTripOrder(id: number, options?: RawAxiosRequestConfig) {
        return SolutionTripOrderResourceApiFp(this.configuration).deleteSolutionTripOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripOrderResourceApi
     */
    public getAllSolutionTripOrders(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return SolutionTripOrderResourceApiFp(this.configuration).getAllSolutionTripOrders(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripOrderResourceApi
     */
    public getSolutionTripOrder(id: number, options?: RawAxiosRequestConfig) {
        return SolutionTripOrderResourceApiFp(this.configuration).getSolutionTripOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionTripOrderDTO} solutionTripOrderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripOrderResourceApi
     */
    public partialUpdateSolutionTripOrder(id: number, solutionTripOrderDTO: SolutionTripOrderDTO, options?: RawAxiosRequestConfig) {
        return SolutionTripOrderResourceApiFp(this.configuration).partialUpdateSolutionTripOrder(id, solutionTripOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionTripOrderDTO} solutionTripOrderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripOrderResourceApi
     */
    public updateSolutionTripOrder(id: number, solutionTripOrderDTO: SolutionTripOrderDTO, options?: RawAxiosRequestConfig) {
        return SolutionTripOrderResourceApiFp(this.configuration).updateSolutionTripOrder(id, solutionTripOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SolutionTripResourceApi - axios parameter creator
 * @export
 */
export const SolutionTripResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SolutionTripDTO} solutionTripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolutionTrip: async (solutionTripDTO: SolutionTripDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'solutionTripDTO' is not null or undefined
            assertParamExists('createSolutionTrip', 'solutionTripDTO', solutionTripDTO)
            const localVarPath = `/api/solution-trips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionTripDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolutionTrip: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSolutionTrip', 'id', id)
            const localVarPath = `/api/solution-trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutionTrips: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/solution-trips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolutionTrip: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSolutionTrip', 'id', id)
            const localVarPath = `/api/solution-trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripDTO} solutionTripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolutionTrip: async (id: number, solutionTripDTO: SolutionTripDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateSolutionTrip', 'id', id)
            // verify required parameter 'solutionTripDTO' is not null or undefined
            assertParamExists('partialUpdateSolutionTrip', 'solutionTripDTO', solutionTripDTO)
            const localVarPath = `/api/solution-trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionTripDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripDTO} solutionTripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolutionTrip: async (id: number, solutionTripDTO: SolutionTripDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSolutionTrip', 'id', id)
            // verify required parameter 'solutionTripDTO' is not null or undefined
            assertParamExists('updateSolutionTrip', 'solutionTripDTO', solutionTripDTO)
            const localVarPath = `/api/solution-trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionTripDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SolutionTripResourceApi - functional programming interface
 * @export
 */
export const SolutionTripResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SolutionTripResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SolutionTripDTO} solutionTripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSolutionTrip(solutionTripDTO: SolutionTripDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSolutionTrip(solutionTripDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripResourceApi.createSolutionTrip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSolutionTrip(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSolutionTrip(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripResourceApi.deleteSolutionTrip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSolutionTrips(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SolutionTripDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSolutionTrips(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripResourceApi.getAllSolutionTrips']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolutionTrip(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolutionTrip(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripResourceApi.getSolutionTrip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripDTO} solutionTripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateSolutionTrip(id: number, solutionTripDTO: SolutionTripDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateSolutionTrip(id, solutionTripDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripResourceApi.partialUpdateSolutionTrip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripDTO} solutionTripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSolutionTrip(id: number, solutionTripDTO: SolutionTripDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSolutionTrip(id, solutionTripDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripResourceApi.updateSolutionTrip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SolutionTripResourceApi - factory interface
 * @export
 */
export const SolutionTripResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SolutionTripResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {SolutionTripDTO} solutionTripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolutionTrip(solutionTripDTO: SolutionTripDTO, options?: any): AxiosPromise<SolutionTripDTO> {
            return localVarFp.createSolutionTrip(solutionTripDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolutionTrip(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSolutionTrip(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutionTrips(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<SolutionTripDTO>> {
            return localVarFp.getAllSolutionTrips(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolutionTrip(id: number, options?: any): AxiosPromise<SolutionTripDTO> {
            return localVarFp.getSolutionTrip(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripDTO} solutionTripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolutionTrip(id: number, solutionTripDTO: SolutionTripDTO, options?: any): AxiosPromise<SolutionTripDTO> {
            return localVarFp.partialUpdateSolutionTrip(id, solutionTripDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripDTO} solutionTripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolutionTrip(id: number, solutionTripDTO: SolutionTripDTO, options?: any): AxiosPromise<SolutionTripDTO> {
            return localVarFp.updateSolutionTrip(id, solutionTripDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SolutionTripResourceApi - object-oriented interface
 * @export
 * @class SolutionTripResourceApi
 * @extends {BaseAPI}
 */
export class SolutionTripResourceApi extends BaseAPI {
    /**
     * 
     * @param {SolutionTripDTO} solutionTripDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripResourceApi
     */
    public createSolutionTrip(solutionTripDTO: SolutionTripDTO, options?: RawAxiosRequestConfig) {
        return SolutionTripResourceApiFp(this.configuration).createSolutionTrip(solutionTripDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripResourceApi
     */
    public deleteSolutionTrip(id: number, options?: RawAxiosRequestConfig) {
        return SolutionTripResourceApiFp(this.configuration).deleteSolutionTrip(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripResourceApi
     */
    public getAllSolutionTrips(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return SolutionTripResourceApiFp(this.configuration).getAllSolutionTrips(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripResourceApi
     */
    public getSolutionTrip(id: number, options?: RawAxiosRequestConfig) {
        return SolutionTripResourceApiFp(this.configuration).getSolutionTrip(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionTripDTO} solutionTripDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripResourceApi
     */
    public partialUpdateSolutionTrip(id: number, solutionTripDTO: SolutionTripDTO, options?: RawAxiosRequestConfig) {
        return SolutionTripResourceApiFp(this.configuration).partialUpdateSolutionTrip(id, solutionTripDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionTripDTO} solutionTripDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripResourceApi
     */
    public updateSolutionTrip(id: number, solutionTripDTO: SolutionTripDTO, options?: RawAxiosRequestConfig) {
        return SolutionTripResourceApiFp(this.configuration).updateSolutionTrip(id, solutionTripDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SolutionTripStopPointOrderResourceApi - axios parameter creator
 * @export
 */
export const SolutionTripStopPointOrderResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SolutionTripStopPointOrderDTO} solutionTripStopPointOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolutionTripStopPointOrder: async (solutionTripStopPointOrderDTO: SolutionTripStopPointOrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'solutionTripStopPointOrderDTO' is not null or undefined
            assertParamExists('createSolutionTripStopPointOrder', 'solutionTripStopPointOrderDTO', solutionTripStopPointOrderDTO)
            const localVarPath = `/api/solution-trip-stop-point-orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionTripStopPointOrderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolutionTripStopPointOrder: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSolutionTripStopPointOrder', 'id', id)
            const localVarPath = `/api/solution-trip-stop-point-orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutionTripStopPointOrders: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/solution-trip-stop-point-orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolutionTripStopPointOrder: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSolutionTripStopPointOrder', 'id', id)
            const localVarPath = `/api/solution-trip-stop-point-orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripStopPointOrderDTO} solutionTripStopPointOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolutionTripStopPointOrder: async (id: number, solutionTripStopPointOrderDTO: SolutionTripStopPointOrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateSolutionTripStopPointOrder', 'id', id)
            // verify required parameter 'solutionTripStopPointOrderDTO' is not null or undefined
            assertParamExists('partialUpdateSolutionTripStopPointOrder', 'solutionTripStopPointOrderDTO', solutionTripStopPointOrderDTO)
            const localVarPath = `/api/solution-trip-stop-point-orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionTripStopPointOrderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripStopPointOrderDTO} solutionTripStopPointOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolutionTripStopPointOrder: async (id: number, solutionTripStopPointOrderDTO: SolutionTripStopPointOrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSolutionTripStopPointOrder', 'id', id)
            // verify required parameter 'solutionTripStopPointOrderDTO' is not null or undefined
            assertParamExists('updateSolutionTripStopPointOrder', 'solutionTripStopPointOrderDTO', solutionTripStopPointOrderDTO)
            const localVarPath = `/api/solution-trip-stop-point-orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionTripStopPointOrderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SolutionTripStopPointOrderResourceApi - functional programming interface
 * @export
 */
export const SolutionTripStopPointOrderResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SolutionTripStopPointOrderResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SolutionTripStopPointOrderDTO} solutionTripStopPointOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSolutionTripStopPointOrder(solutionTripStopPointOrderDTO: SolutionTripStopPointOrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripStopPointOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSolutionTripStopPointOrder(solutionTripStopPointOrderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripStopPointOrderResourceApi.createSolutionTripStopPointOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSolutionTripStopPointOrder(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSolutionTripStopPointOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripStopPointOrderResourceApi.deleteSolutionTripStopPointOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSolutionTripStopPointOrders(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SolutionTripStopPointOrderDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSolutionTripStopPointOrders(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripStopPointOrderResourceApi.getAllSolutionTripStopPointOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolutionTripStopPointOrder(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripStopPointOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolutionTripStopPointOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripStopPointOrderResourceApi.getSolutionTripStopPointOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripStopPointOrderDTO} solutionTripStopPointOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateSolutionTripStopPointOrder(id: number, solutionTripStopPointOrderDTO: SolutionTripStopPointOrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripStopPointOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateSolutionTripStopPointOrder(id, solutionTripStopPointOrderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripStopPointOrderResourceApi.partialUpdateSolutionTripStopPointOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripStopPointOrderDTO} solutionTripStopPointOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSolutionTripStopPointOrder(id: number, solutionTripStopPointOrderDTO: SolutionTripStopPointOrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripStopPointOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSolutionTripStopPointOrder(id, solutionTripStopPointOrderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripStopPointOrderResourceApi.updateSolutionTripStopPointOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SolutionTripStopPointOrderResourceApi - factory interface
 * @export
 */
export const SolutionTripStopPointOrderResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SolutionTripStopPointOrderResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {SolutionTripStopPointOrderDTO} solutionTripStopPointOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolutionTripStopPointOrder(solutionTripStopPointOrderDTO: SolutionTripStopPointOrderDTO, options?: any): AxiosPromise<SolutionTripStopPointOrderDTO> {
            return localVarFp.createSolutionTripStopPointOrder(solutionTripStopPointOrderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolutionTripStopPointOrder(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSolutionTripStopPointOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutionTripStopPointOrders(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<SolutionTripStopPointOrderDTO>> {
            return localVarFp.getAllSolutionTripStopPointOrders(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolutionTripStopPointOrder(id: number, options?: any): AxiosPromise<SolutionTripStopPointOrderDTO> {
            return localVarFp.getSolutionTripStopPointOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripStopPointOrderDTO} solutionTripStopPointOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolutionTripStopPointOrder(id: number, solutionTripStopPointOrderDTO: SolutionTripStopPointOrderDTO, options?: any): AxiosPromise<SolutionTripStopPointOrderDTO> {
            return localVarFp.partialUpdateSolutionTripStopPointOrder(id, solutionTripStopPointOrderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripStopPointOrderDTO} solutionTripStopPointOrderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolutionTripStopPointOrder(id: number, solutionTripStopPointOrderDTO: SolutionTripStopPointOrderDTO, options?: any): AxiosPromise<SolutionTripStopPointOrderDTO> {
            return localVarFp.updateSolutionTripStopPointOrder(id, solutionTripStopPointOrderDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SolutionTripStopPointOrderResourceApi - object-oriented interface
 * @export
 * @class SolutionTripStopPointOrderResourceApi
 * @extends {BaseAPI}
 */
export class SolutionTripStopPointOrderResourceApi extends BaseAPI {
    /**
     * 
     * @param {SolutionTripStopPointOrderDTO} solutionTripStopPointOrderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripStopPointOrderResourceApi
     */
    public createSolutionTripStopPointOrder(solutionTripStopPointOrderDTO: SolutionTripStopPointOrderDTO, options?: RawAxiosRequestConfig) {
        return SolutionTripStopPointOrderResourceApiFp(this.configuration).createSolutionTripStopPointOrder(solutionTripStopPointOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripStopPointOrderResourceApi
     */
    public deleteSolutionTripStopPointOrder(id: number, options?: RawAxiosRequestConfig) {
        return SolutionTripStopPointOrderResourceApiFp(this.configuration).deleteSolutionTripStopPointOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripStopPointOrderResourceApi
     */
    public getAllSolutionTripStopPointOrders(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return SolutionTripStopPointOrderResourceApiFp(this.configuration).getAllSolutionTripStopPointOrders(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripStopPointOrderResourceApi
     */
    public getSolutionTripStopPointOrder(id: number, options?: RawAxiosRequestConfig) {
        return SolutionTripStopPointOrderResourceApiFp(this.configuration).getSolutionTripStopPointOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionTripStopPointOrderDTO} solutionTripStopPointOrderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripStopPointOrderResourceApi
     */
    public partialUpdateSolutionTripStopPointOrder(id: number, solutionTripStopPointOrderDTO: SolutionTripStopPointOrderDTO, options?: RawAxiosRequestConfig) {
        return SolutionTripStopPointOrderResourceApiFp(this.configuration).partialUpdateSolutionTripStopPointOrder(id, solutionTripStopPointOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionTripStopPointOrderDTO} solutionTripStopPointOrderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripStopPointOrderResourceApi
     */
    public updateSolutionTripStopPointOrder(id: number, solutionTripStopPointOrderDTO: SolutionTripStopPointOrderDTO, options?: RawAxiosRequestConfig) {
        return SolutionTripStopPointOrderResourceApiFp(this.configuration).updateSolutionTripStopPointOrder(id, solutionTripStopPointOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SolutionTripStopPointResourceApi - axios parameter creator
 * @export
 */
export const SolutionTripStopPointResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SolutionTripStopPointDTO} solutionTripStopPointDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolutionTripStopPoint: async (solutionTripStopPointDTO: SolutionTripStopPointDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'solutionTripStopPointDTO' is not null or undefined
            assertParamExists('createSolutionTripStopPoint', 'solutionTripStopPointDTO', solutionTripStopPointDTO)
            const localVarPath = `/api/solution-trip-stop-points`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionTripStopPointDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolutionTripStopPoint: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSolutionTripStopPoint', 'id', id)
            const localVarPath = `/api/solution-trip-stop-points/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutionTripStopPoints: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/solution-trip-stop-points`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolutionTripStopPoint: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSolutionTripStopPoint', 'id', id)
            const localVarPath = `/api/solution-trip-stop-points/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripStopPointDTO} solutionTripStopPointDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolutionTripStopPoint: async (id: number, solutionTripStopPointDTO: SolutionTripStopPointDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateSolutionTripStopPoint', 'id', id)
            // verify required parameter 'solutionTripStopPointDTO' is not null or undefined
            assertParamExists('partialUpdateSolutionTripStopPoint', 'solutionTripStopPointDTO', solutionTripStopPointDTO)
            const localVarPath = `/api/solution-trip-stop-points/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionTripStopPointDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripStopPointDTO} solutionTripStopPointDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolutionTripStopPoint: async (id: number, solutionTripStopPointDTO: SolutionTripStopPointDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSolutionTripStopPoint', 'id', id)
            // verify required parameter 'solutionTripStopPointDTO' is not null or undefined
            assertParamExists('updateSolutionTripStopPoint', 'solutionTripStopPointDTO', solutionTripStopPointDTO)
            const localVarPath = `/api/solution-trip-stop-points/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionTripStopPointDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SolutionTripStopPointResourceApi - functional programming interface
 * @export
 */
export const SolutionTripStopPointResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SolutionTripStopPointResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SolutionTripStopPointDTO} solutionTripStopPointDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSolutionTripStopPoint(solutionTripStopPointDTO: SolutionTripStopPointDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripStopPointDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSolutionTripStopPoint(solutionTripStopPointDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripStopPointResourceApi.createSolutionTripStopPoint']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSolutionTripStopPoint(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSolutionTripStopPoint(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripStopPointResourceApi.deleteSolutionTripStopPoint']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSolutionTripStopPoints(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SolutionTripStopPointDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSolutionTripStopPoints(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripStopPointResourceApi.getAllSolutionTripStopPoints']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolutionTripStopPoint(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripStopPointDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolutionTripStopPoint(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripStopPointResourceApi.getSolutionTripStopPoint']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripStopPointDTO} solutionTripStopPointDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateSolutionTripStopPoint(id: number, solutionTripStopPointDTO: SolutionTripStopPointDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripStopPointDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateSolutionTripStopPoint(id, solutionTripStopPointDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripStopPointResourceApi.partialUpdateSolutionTripStopPoint']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripStopPointDTO} solutionTripStopPointDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSolutionTripStopPoint(id: number, solutionTripStopPointDTO: SolutionTripStopPointDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionTripStopPointDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSolutionTripStopPoint(id, solutionTripStopPointDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionTripStopPointResourceApi.updateSolutionTripStopPoint']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SolutionTripStopPointResourceApi - factory interface
 * @export
 */
export const SolutionTripStopPointResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SolutionTripStopPointResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {SolutionTripStopPointDTO} solutionTripStopPointDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolutionTripStopPoint(solutionTripStopPointDTO: SolutionTripStopPointDTO, options?: any): AxiosPromise<SolutionTripStopPointDTO> {
            return localVarFp.createSolutionTripStopPoint(solutionTripStopPointDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolutionTripStopPoint(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSolutionTripStopPoint(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutionTripStopPoints(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<SolutionTripStopPointDTO>> {
            return localVarFp.getAllSolutionTripStopPoints(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolutionTripStopPoint(id: number, options?: any): AxiosPromise<SolutionTripStopPointDTO> {
            return localVarFp.getSolutionTripStopPoint(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripStopPointDTO} solutionTripStopPointDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolutionTripStopPoint(id: number, solutionTripStopPointDTO: SolutionTripStopPointDTO, options?: any): AxiosPromise<SolutionTripStopPointDTO> {
            return localVarFp.partialUpdateSolutionTripStopPoint(id, solutionTripStopPointDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionTripStopPointDTO} solutionTripStopPointDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolutionTripStopPoint(id: number, solutionTripStopPointDTO: SolutionTripStopPointDTO, options?: any): AxiosPromise<SolutionTripStopPointDTO> {
            return localVarFp.updateSolutionTripStopPoint(id, solutionTripStopPointDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SolutionTripStopPointResourceApi - object-oriented interface
 * @export
 * @class SolutionTripStopPointResourceApi
 * @extends {BaseAPI}
 */
export class SolutionTripStopPointResourceApi extends BaseAPI {
    /**
     * 
     * @param {SolutionTripStopPointDTO} solutionTripStopPointDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripStopPointResourceApi
     */
    public createSolutionTripStopPoint(solutionTripStopPointDTO: SolutionTripStopPointDTO, options?: RawAxiosRequestConfig) {
        return SolutionTripStopPointResourceApiFp(this.configuration).createSolutionTripStopPoint(solutionTripStopPointDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripStopPointResourceApi
     */
    public deleteSolutionTripStopPoint(id: number, options?: RawAxiosRequestConfig) {
        return SolutionTripStopPointResourceApiFp(this.configuration).deleteSolutionTripStopPoint(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripStopPointResourceApi
     */
    public getAllSolutionTripStopPoints(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return SolutionTripStopPointResourceApiFp(this.configuration).getAllSolutionTripStopPoints(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripStopPointResourceApi
     */
    public getSolutionTripStopPoint(id: number, options?: RawAxiosRequestConfig) {
        return SolutionTripStopPointResourceApiFp(this.configuration).getSolutionTripStopPoint(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionTripStopPointDTO} solutionTripStopPointDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripStopPointResourceApi
     */
    public partialUpdateSolutionTripStopPoint(id: number, solutionTripStopPointDTO: SolutionTripStopPointDTO, options?: RawAxiosRequestConfig) {
        return SolutionTripStopPointResourceApiFp(this.configuration).partialUpdateSolutionTripStopPoint(id, solutionTripStopPointDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionTripStopPointDTO} solutionTripStopPointDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionTripStopPointResourceApi
     */
    public updateSolutionTripStopPoint(id: number, solutionTripStopPointDTO: SolutionTripStopPointDTO, options?: RawAxiosRequestConfig) {
        return SolutionTripStopPointResourceApiFp(this.configuration).updateSolutionTripStopPoint(id, solutionTripStopPointDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SolutionUnplannedOrderItemResourceApi - axios parameter creator
 * @export
 */
export const SolutionUnplannedOrderItemResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SolutionUnplannedOrderItemDTO} solutionUnplannedOrderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolutionUnplannedOrderItem: async (solutionUnplannedOrderItemDTO: SolutionUnplannedOrderItemDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'solutionUnplannedOrderItemDTO' is not null or undefined
            assertParamExists('createSolutionUnplannedOrderItem', 'solutionUnplannedOrderItemDTO', solutionUnplannedOrderItemDTO)
            const localVarPath = `/api/solution-unplanned-order-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionUnplannedOrderItemDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolutionUnplannedOrderItem: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSolutionUnplannedOrderItem', 'id', id)
            const localVarPath = `/api/solution-unplanned-order-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutionUnplannedOrderItems: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/solution-unplanned-order-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolutionUnplannedOrderItem: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSolutionUnplannedOrderItem', 'id', id)
            const localVarPath = `/api/solution-unplanned-order-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionUnplannedOrderItemDTO} solutionUnplannedOrderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolutionUnplannedOrderItem: async (id: number, solutionUnplannedOrderItemDTO: SolutionUnplannedOrderItemDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateSolutionUnplannedOrderItem', 'id', id)
            // verify required parameter 'solutionUnplannedOrderItemDTO' is not null or undefined
            assertParamExists('partialUpdateSolutionUnplannedOrderItem', 'solutionUnplannedOrderItemDTO', solutionUnplannedOrderItemDTO)
            const localVarPath = `/api/solution-unplanned-order-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionUnplannedOrderItemDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionUnplannedOrderItemDTO} solutionUnplannedOrderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolutionUnplannedOrderItem: async (id: number, solutionUnplannedOrderItemDTO: SolutionUnplannedOrderItemDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSolutionUnplannedOrderItem', 'id', id)
            // verify required parameter 'solutionUnplannedOrderItemDTO' is not null or undefined
            assertParamExists('updateSolutionUnplannedOrderItem', 'solutionUnplannedOrderItemDTO', solutionUnplannedOrderItemDTO)
            const localVarPath = `/api/solution-unplanned-order-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solutionUnplannedOrderItemDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SolutionUnplannedOrderItemResourceApi - functional programming interface
 * @export
 */
export const SolutionUnplannedOrderItemResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SolutionUnplannedOrderItemResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SolutionUnplannedOrderItemDTO} solutionUnplannedOrderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSolutionUnplannedOrderItem(solutionUnplannedOrderItemDTO: SolutionUnplannedOrderItemDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionUnplannedOrderItemDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSolutionUnplannedOrderItem(solutionUnplannedOrderItemDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionUnplannedOrderItemResourceApi.createSolutionUnplannedOrderItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSolutionUnplannedOrderItem(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSolutionUnplannedOrderItem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionUnplannedOrderItemResourceApi.deleteSolutionUnplannedOrderItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSolutionUnplannedOrderItems(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SolutionUnplannedOrderItemDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSolutionUnplannedOrderItems(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionUnplannedOrderItemResourceApi.getAllSolutionUnplannedOrderItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolutionUnplannedOrderItem(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionUnplannedOrderItemDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolutionUnplannedOrderItem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionUnplannedOrderItemResourceApi.getSolutionUnplannedOrderItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionUnplannedOrderItemDTO} solutionUnplannedOrderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateSolutionUnplannedOrderItem(id: number, solutionUnplannedOrderItemDTO: SolutionUnplannedOrderItemDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionUnplannedOrderItemDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateSolutionUnplannedOrderItem(id, solutionUnplannedOrderItemDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionUnplannedOrderItemResourceApi.partialUpdateSolutionUnplannedOrderItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionUnplannedOrderItemDTO} solutionUnplannedOrderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSolutionUnplannedOrderItem(id: number, solutionUnplannedOrderItemDTO: SolutionUnplannedOrderItemDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolutionUnplannedOrderItemDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSolutionUnplannedOrderItem(id, solutionUnplannedOrderItemDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolutionUnplannedOrderItemResourceApi.updateSolutionUnplannedOrderItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SolutionUnplannedOrderItemResourceApi - factory interface
 * @export
 */
export const SolutionUnplannedOrderItemResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SolutionUnplannedOrderItemResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {SolutionUnplannedOrderItemDTO} solutionUnplannedOrderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolutionUnplannedOrderItem(solutionUnplannedOrderItemDTO: SolutionUnplannedOrderItemDTO, options?: any): AxiosPromise<SolutionUnplannedOrderItemDTO> {
            return localVarFp.createSolutionUnplannedOrderItem(solutionUnplannedOrderItemDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolutionUnplannedOrderItem(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSolutionUnplannedOrderItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolutionUnplannedOrderItems(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<SolutionUnplannedOrderItemDTO>> {
            return localVarFp.getAllSolutionUnplannedOrderItems(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolutionUnplannedOrderItem(id: number, options?: any): AxiosPromise<SolutionUnplannedOrderItemDTO> {
            return localVarFp.getSolutionUnplannedOrderItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionUnplannedOrderItemDTO} solutionUnplannedOrderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolutionUnplannedOrderItem(id: number, solutionUnplannedOrderItemDTO: SolutionUnplannedOrderItemDTO, options?: any): AxiosPromise<SolutionUnplannedOrderItemDTO> {
            return localVarFp.partialUpdateSolutionUnplannedOrderItem(id, solutionUnplannedOrderItemDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolutionUnplannedOrderItemDTO} solutionUnplannedOrderItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolutionUnplannedOrderItem(id: number, solutionUnplannedOrderItemDTO: SolutionUnplannedOrderItemDTO, options?: any): AxiosPromise<SolutionUnplannedOrderItemDTO> {
            return localVarFp.updateSolutionUnplannedOrderItem(id, solutionUnplannedOrderItemDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SolutionUnplannedOrderItemResourceApi - object-oriented interface
 * @export
 * @class SolutionUnplannedOrderItemResourceApi
 * @extends {BaseAPI}
 */
export class SolutionUnplannedOrderItemResourceApi extends BaseAPI {
    /**
     * 
     * @param {SolutionUnplannedOrderItemDTO} solutionUnplannedOrderItemDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionUnplannedOrderItemResourceApi
     */
    public createSolutionUnplannedOrderItem(solutionUnplannedOrderItemDTO: SolutionUnplannedOrderItemDTO, options?: RawAxiosRequestConfig) {
        return SolutionUnplannedOrderItemResourceApiFp(this.configuration).createSolutionUnplannedOrderItem(solutionUnplannedOrderItemDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionUnplannedOrderItemResourceApi
     */
    public deleteSolutionUnplannedOrderItem(id: number, options?: RawAxiosRequestConfig) {
        return SolutionUnplannedOrderItemResourceApiFp(this.configuration).deleteSolutionUnplannedOrderItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionUnplannedOrderItemResourceApi
     */
    public getAllSolutionUnplannedOrderItems(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return SolutionUnplannedOrderItemResourceApiFp(this.configuration).getAllSolutionUnplannedOrderItems(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionUnplannedOrderItemResourceApi
     */
    public getSolutionUnplannedOrderItem(id: number, options?: RawAxiosRequestConfig) {
        return SolutionUnplannedOrderItemResourceApiFp(this.configuration).getSolutionUnplannedOrderItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionUnplannedOrderItemDTO} solutionUnplannedOrderItemDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionUnplannedOrderItemResourceApi
     */
    public partialUpdateSolutionUnplannedOrderItem(id: number, solutionUnplannedOrderItemDTO: SolutionUnplannedOrderItemDTO, options?: RawAxiosRequestConfig) {
        return SolutionUnplannedOrderItemResourceApiFp(this.configuration).partialUpdateSolutionUnplannedOrderItem(id, solutionUnplannedOrderItemDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolutionUnplannedOrderItemDTO} solutionUnplannedOrderItemDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolutionUnplannedOrderItemResourceApi
     */
    public updateSolutionUnplannedOrderItem(id: number, solutionUnplannedOrderItemDTO: SolutionUnplannedOrderItemDTO, options?: RawAxiosRequestConfig) {
        return SolutionUnplannedOrderItemResourceApiFp(this.configuration).updateSolutionUnplannedOrderItem(id, solutionUnplannedOrderItemDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SolveResourceApi - axios parameter creator
 * @export
 */
export const SolveResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} scheduleId 
         * @param {SolverInputDTO} solverInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAutoSolve: async (scheduleId: number, solverInputDTO: SolverInputDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('createAutoSolve', 'scheduleId', scheduleId)
            // verify required parameter 'solverInputDTO' is not null or undefined
            assertParamExists('createAutoSolve', 'solverInputDTO', solverInputDTO)
            const localVarPath = `/api/solve/auto/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solverInputDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} scheduleId 
         * @param {SolverInputWithInitialDTO} solverInputWithInitialDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAutoSolveWithInitial: async (scheduleId: number, solverInputWithInitialDTO: SolverInputWithInitialDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('createAutoSolveWithInitial', 'scheduleId', scheduleId)
            // verify required parameter 'solverInputWithInitialDTO' is not null or undefined
            assertParamExists('createAutoSolveWithInitial', 'solverInputWithInitialDTO', solverInputWithInitialDTO)
            const localVarPath = `/api/solve/auto-with-initial/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solverInputWithInitialDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} scheduleId 
         * @param {SolverInputWithInitialDTO} solverInputWithInitialDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManualSolve: async (scheduleId: number, solverInputWithInitialDTO: SolverInputWithInitialDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('createManualSolve', 'scheduleId', scheduleId)
            // verify required parameter 'solverInputWithInitialDTO' is not null or undefined
            assertParamExists('createManualSolve', 'solverInputWithInitialDTO', solverInputWithInitialDTO)
            const localVarPath = `/api/solve/manual/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solverInputWithInitialDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SolveResourceApi - functional programming interface
 * @export
 */
export const SolveResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SolveResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} scheduleId 
         * @param {SolverInputDTO} solverInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAutoSolve(scheduleId: number, solverInputDTO: SolverInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolverResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAutoSolve(scheduleId, solverInputDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolveResourceApi.createAutoSolve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} scheduleId 
         * @param {SolverInputWithInitialDTO} solverInputWithInitialDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAutoSolveWithInitial(scheduleId: number, solverInputWithInitialDTO: SolverInputWithInitialDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolverResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAutoSolveWithInitial(scheduleId, solverInputWithInitialDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolveResourceApi.createAutoSolveWithInitial']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} scheduleId 
         * @param {SolverInputWithInitialDTO} solverInputWithInitialDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createManualSolve(scheduleId: number, solverInputWithInitialDTO: SolverInputWithInitialDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolverResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createManualSolve(scheduleId, solverInputWithInitialDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolveResourceApi.createManualSolve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SolveResourceApi - factory interface
 * @export
 */
export const SolveResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SolveResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} scheduleId 
         * @param {SolverInputDTO} solverInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAutoSolve(scheduleId: number, solverInputDTO: SolverInputDTO, options?: any): AxiosPromise<SolverResultDTO> {
            return localVarFp.createAutoSolve(scheduleId, solverInputDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} scheduleId 
         * @param {SolverInputWithInitialDTO} solverInputWithInitialDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAutoSolveWithInitial(scheduleId: number, solverInputWithInitialDTO: SolverInputWithInitialDTO, options?: any): AxiosPromise<SolverResultDTO> {
            return localVarFp.createAutoSolveWithInitial(scheduleId, solverInputWithInitialDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} scheduleId 
         * @param {SolverInputWithInitialDTO} solverInputWithInitialDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManualSolve(scheduleId: number, solverInputWithInitialDTO: SolverInputWithInitialDTO, options?: any): AxiosPromise<SolverResultDTO> {
            return localVarFp.createManualSolve(scheduleId, solverInputWithInitialDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SolveResourceApi - object-oriented interface
 * @export
 * @class SolveResourceApi
 * @extends {BaseAPI}
 */
export class SolveResourceApi extends BaseAPI {
    /**
     * 
     * @param {number} scheduleId 
     * @param {SolverInputDTO} solverInputDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolveResourceApi
     */
    public createAutoSolve(scheduleId: number, solverInputDTO: SolverInputDTO, options?: RawAxiosRequestConfig) {
        return SolveResourceApiFp(this.configuration).createAutoSolve(scheduleId, solverInputDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} scheduleId 
     * @param {SolverInputWithInitialDTO} solverInputWithInitialDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolveResourceApi
     */
    public createAutoSolveWithInitial(scheduleId: number, solverInputWithInitialDTO: SolverInputWithInitialDTO, options?: RawAxiosRequestConfig) {
        return SolveResourceApiFp(this.configuration).createAutoSolveWithInitial(scheduleId, solverInputWithInitialDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} scheduleId 
     * @param {SolverInputWithInitialDTO} solverInputWithInitialDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolveResourceApi
     */
    public createManualSolve(scheduleId: number, solverInputWithInitialDTO: SolverInputWithInitialDTO, options?: RawAxiosRequestConfig) {
        return SolveResourceApiFp(this.configuration).createManualSolve(scheduleId, solverInputWithInitialDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SolverConfigResourceApi - axios parameter creator
 * @export
 */
export const SolverConfigResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SolverConfigDTO} solverConfigDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolverConfig: async (solverConfigDTO: SolverConfigDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'solverConfigDTO' is not null or undefined
            assertParamExists('createSolverConfig', 'solverConfigDTO', solverConfigDTO)
            const localVarPath = `/api/solver-configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solverConfigDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolverConfig: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSolverConfig', 'id', id)
            const localVarPath = `/api/solver-configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolverConfigs: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/solver-configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolverConfig: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSolverConfig', 'id', id)
            const localVarPath = `/api/solver-configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolverConfigDTO} solverConfigDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolverConfig: async (id: number, solverConfigDTO: SolverConfigDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateSolverConfig', 'id', id)
            // verify required parameter 'solverConfigDTO' is not null or undefined
            assertParamExists('partialUpdateSolverConfig', 'solverConfigDTO', solverConfigDTO)
            const localVarPath = `/api/solver-configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solverConfigDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SolverConfigDTO} solverConfigDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolverConfig: async (id: number, solverConfigDTO: SolverConfigDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSolverConfig', 'id', id)
            // verify required parameter 'solverConfigDTO' is not null or undefined
            assertParamExists('updateSolverConfig', 'solverConfigDTO', solverConfigDTO)
            const localVarPath = `/api/solver-configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(solverConfigDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SolverConfigResourceApi - functional programming interface
 * @export
 */
export const SolverConfigResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SolverConfigResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SolverConfigDTO} solverConfigDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSolverConfig(solverConfigDTO: SolverConfigDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolverConfigDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSolverConfig(solverConfigDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolverConfigResourceApi.createSolverConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSolverConfig(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSolverConfig(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolverConfigResourceApi.deleteSolverConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSolverConfigs(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SolverConfigDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSolverConfigs(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolverConfigResourceApi.getAllSolverConfigs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSolverConfig(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolverConfigDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSolverConfig(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolverConfigResourceApi.getSolverConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolverConfigDTO} solverConfigDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateSolverConfig(id: number, solverConfigDTO: SolverConfigDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolverConfigDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateSolverConfig(id, solverConfigDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolverConfigResourceApi.partialUpdateSolverConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {SolverConfigDTO} solverConfigDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSolverConfig(id: number, solverConfigDTO: SolverConfigDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SolverConfigDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSolverConfig(id, solverConfigDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SolverConfigResourceApi.updateSolverConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SolverConfigResourceApi - factory interface
 * @export
 */
export const SolverConfigResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SolverConfigResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {SolverConfigDTO} solverConfigDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSolverConfig(solverConfigDTO: SolverConfigDTO, options?: any): AxiosPromise<SolverConfigDTO> {
            return localVarFp.createSolverConfig(solverConfigDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSolverConfig(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSolverConfig(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSolverConfigs(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<SolverConfigDTO>> {
            return localVarFp.getAllSolverConfigs(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSolverConfig(id: number, options?: any): AxiosPromise<SolverConfigDTO> {
            return localVarFp.getSolverConfig(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolverConfigDTO} solverConfigDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateSolverConfig(id: number, solverConfigDTO: SolverConfigDTO, options?: any): AxiosPromise<SolverConfigDTO> {
            return localVarFp.partialUpdateSolverConfig(id, solverConfigDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SolverConfigDTO} solverConfigDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSolverConfig(id: number, solverConfigDTO: SolverConfigDTO, options?: any): AxiosPromise<SolverConfigDTO> {
            return localVarFp.updateSolverConfig(id, solverConfigDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SolverConfigResourceApi - object-oriented interface
 * @export
 * @class SolverConfigResourceApi
 * @extends {BaseAPI}
 */
export class SolverConfigResourceApi extends BaseAPI {
    /**
     * 
     * @param {SolverConfigDTO} solverConfigDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolverConfigResourceApi
     */
    public createSolverConfig(solverConfigDTO: SolverConfigDTO, options?: RawAxiosRequestConfig) {
        return SolverConfigResourceApiFp(this.configuration).createSolverConfig(solverConfigDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolverConfigResourceApi
     */
    public deleteSolverConfig(id: number, options?: RawAxiosRequestConfig) {
        return SolverConfigResourceApiFp(this.configuration).deleteSolverConfig(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolverConfigResourceApi
     */
    public getAllSolverConfigs(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return SolverConfigResourceApiFp(this.configuration).getAllSolverConfigs(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolverConfigResourceApi
     */
    public getSolverConfig(id: number, options?: RawAxiosRequestConfig) {
        return SolverConfigResourceApiFp(this.configuration).getSolverConfig(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolverConfigDTO} solverConfigDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolverConfigResourceApi
     */
    public partialUpdateSolverConfig(id: number, solverConfigDTO: SolverConfigDTO, options?: RawAxiosRequestConfig) {
        return SolverConfigResourceApiFp(this.configuration).partialUpdateSolverConfig(id, solverConfigDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SolverConfigDTO} solverConfigDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolverConfigResourceApi
     */
    public updateSolverConfig(id: number, solverConfigDTO: SolverConfigDTO, options?: RawAxiosRequestConfig) {
        return SolverConfigResourceApiFp(this.configuration).updateSolverConfig(id, solverConfigDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserJwtControllerApi - axios parameter creator
 * @export
 */
export const UserJwtControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginVM} loginVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorize: async (loginVM: LoginVM, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginVM' is not null or undefined
            assertParamExists('authorize', 'loginVM', loginVM)
            const localVarPath = `/api/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginVM, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserJwtControllerApi - functional programming interface
 * @export
 */
export const UserJwtControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserJwtControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginVM} loginVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorize(loginVM: LoginVM, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JWTToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorize(loginVM, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserJwtControllerApi.authorize']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserJwtControllerApi - factory interface
 * @export
 */
export const UserJwtControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserJwtControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginVM} loginVM 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorize(loginVM: LoginVM, options?: any): AxiosPromise<JWTToken> {
            return localVarFp.authorize(loginVM, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserJwtControllerApi - object-oriented interface
 * @export
 * @class UserJwtControllerApi
 * @extends {BaseAPI}
 */
export class UserJwtControllerApi extends BaseAPI {
    /**
     * 
     * @param {LoginVM} loginVM 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserJwtControllerApi
     */
    public authorize(loginVM: LoginVM, options?: RawAxiosRequestConfig) {
        return UserJwtControllerApiFp(this.configuration).authorize(loginVM, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserResourceApi - axios parameter creator
 * @export
 */
export const UserResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AdminUserDTO} adminUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (adminUserDTO: AdminUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminUserDTO' is not null or undefined
            assertParamExists('createUser', 'adminUserDTO', adminUserDTO)
            const localVarPath = `/api/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (login: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('deleteUser', 'login', login)
            const localVarPath = `/api/admin/users/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (login: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('getUser', 'login', login)
            const localVarPath = `/api/admin/users/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AdminUserDTO} adminUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (adminUserDTO: AdminUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminUserDTO' is not null or undefined
            assertParamExists('updateUser', 'adminUserDTO', adminUserDTO)
            const localVarPath = `/api/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserResourceApi - functional programming interface
 * @export
 */
export const UserResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AdminUserDTO} adminUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(adminUserDTO: AdminUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(adminUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserResourceApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(login: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(login, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserResourceApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdminUserDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserResourceApi.getAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(login: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(login, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserResourceApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AdminUserDTO} adminUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(adminUserDTO: AdminUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(adminUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserResourceApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserResourceApi - factory interface
 * @export
 */
export const UserResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {AdminUserDTO} adminUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(adminUserDTO: AdminUserDTO, options?: any): AxiosPromise<User> {
            return localVarFp.createUser(adminUserDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(login: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteUser(login, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<AdminUserDTO>> {
            return localVarFp.getAllUsers(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(login: string, options?: any): AxiosPromise<AdminUserDTO> {
            return localVarFp.getUser(login, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminUserDTO} adminUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(adminUserDTO: AdminUserDTO, options?: any): AxiosPromise<AdminUserDTO> {
            return localVarFp.updateUser(adminUserDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserResourceApi - object-oriented interface
 * @export
 * @class UserResourceApi
 * @extends {BaseAPI}
 */
export class UserResourceApi extends BaseAPI {
    /**
     * 
     * @param {AdminUserDTO} adminUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public createUser(adminUserDTO: AdminUserDTO, options?: RawAxiosRequestConfig) {
        return UserResourceApiFp(this.configuration).createUser(adminUserDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public deleteUser(login: string, options?: RawAxiosRequestConfig) {
        return UserResourceApiFp(this.configuration).deleteUser(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public getAllUsers(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return UserResourceApiFp(this.configuration).getAllUsers(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public getUser(login: string, options?: RawAxiosRequestConfig) {
        return UserResourceApiFp(this.configuration).getUser(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminUserDTO} adminUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public updateUser(adminUserDTO: AdminUserDTO, options?: RawAxiosRequestConfig) {
        return UserResourceApiFp(this.configuration).updateUser(adminUserDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserXResourceApi - axios parameter creator
 * @export
 */
export const UserXResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserXDTO} userXDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserX: async (userXDTO: UserXDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userXDTO' is not null or undefined
            assertParamExists('createUserX', 'userXDTO', userXDTO)
            const localVarPath = `/api/admin/user-xes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userXDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserX: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserX', 'id', id)
            const localVarPath = `/api/admin/user-xes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserXES: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/user-xes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} employeeId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerForEmployee: async (employeeId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getCustomerForEmployee', 'employeeId', employeeId)
            const localVarPath = `/api/{employeeId}/customers`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrivers: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user-xes/drivers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberOfCustomerForEmployee: async (employeeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getNumberOfCustomerForEmployee', 'employeeId', employeeId)
            const localVarPath = `/api/{employeeId}/customers-num`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberOfUserXByRole: async (role: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('getNumberOfUserXByRole', 'role', role)
            const localVarPath = `/api/user-xes-num/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserX: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserX', 'id', id)
            const localVarPath = `/api/user-xes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserXByLogin: async (login: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('getUserXByLogin', 'login', login)
            const localVarPath = `/api/user-xes-login/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} role 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserXByRole: async (role: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('getUserXByRole', 'role', role)
            const localVarPath = `/api/admin/user-xes/role/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UserXDTO} userXDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateUserX: async (id: number, userXDTO: UserXDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateUserX', 'id', id)
            // verify required parameter 'userXDTO' is not null or undefined
            assertParamExists('partialUpdateUserX', 'userXDTO', userXDTO)
            const localVarPath = `/api/user-xes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userXDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} employeeId 
         * @param {string} fullName 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCustomerAssignToEmployeeByFullName: async (employeeId: number, fullName: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('searchCustomerAssignToEmployeeByFullName', 'employeeId', employeeId)
            // verify required parameter 'fullName' is not null or undefined
            assertParamExists('searchCustomerAssignToEmployeeByFullName', 'fullName', fullName)
            const localVarPath = `/api/user-xes/{employeeId}/customers/search/`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fullName !== undefined) {
                localVarQueryParameter['fullName'] = fullName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} role 
         * @param {string} fullName 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserXByFullNameAndRole: async (role: string, fullName: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('searchUserXByFullNameAndRole', 'role', role)
            // verify required parameter 'fullName' is not null or undefined
            assertParamExists('searchUserXByFullNameAndRole', 'fullName', fullName)
            const localVarPath = `/api/admin/user-xes/search/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (fullName !== undefined) {
                localVarQueryParameter['fullName'] = fullName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UserXDTO} userXDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserX: async (id: number, userXDTO: UserXDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUserX', 'id', id)
            // verify required parameter 'userXDTO' is not null or undefined
            assertParamExists('updateUserX', 'userXDTO', userXDTO)
            const localVarPath = `/api/admin/user-xes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userXDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserXResourceApi - functional programming interface
 * @export
 */
export const UserXResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserXResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserXDTO} userXDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserX(userXDTO: UserXDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserXDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserX(userXDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.createUserX']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserX(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserX(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.deleteUserX']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserXES(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserXDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserXES(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.getAllUserXES']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} employeeId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerForEmployee(employeeId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserXDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerForEmployee(employeeId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.getCustomerForEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDrivers(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserXDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDrivers(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.getDrivers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNumberOfCustomerForEmployee(employeeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNumberOfCustomerForEmployee(employeeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.getNumberOfCustomerForEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNumberOfUserXByRole(role: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNumberOfUserXByRole(role, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.getNumberOfUserXByRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserX(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserXDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserX(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.getUserX']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserXByLogin(login: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserXDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserXByLogin(login, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.getUserXByLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} role 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserXByRole(role: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserXDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserXByRole(role, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.getUserXByRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UserXDTO} userXDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateUserX(id: number, userXDTO: UserXDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserXDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateUserX(id, userXDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.partialUpdateUserX']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} employeeId 
         * @param {string} fullName 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCustomerAssignToEmployeeByFullName(employeeId: number, fullName: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserXDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCustomerAssignToEmployeeByFullName(employeeId, fullName, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.searchCustomerAssignToEmployeeByFullName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} role 
         * @param {string} fullName 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUserXByFullNameAndRole(role: string, fullName: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserXDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUserXByFullNameAndRole(role, fullName, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.searchUserXByFullNameAndRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UserXDTO} userXDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserX(id: number, userXDTO: UserXDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserXDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserX(id, userXDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserXResourceApi.updateUserX']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserXResourceApi - factory interface
 * @export
 */
export const UserXResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserXResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {UserXDTO} userXDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserX(userXDTO: UserXDTO, options?: any): AxiosPromise<UserXDTO> {
            return localVarFp.createUserX(userXDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserX(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserX(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserXES(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<UserXDTO>> {
            return localVarFp.getAllUserXES(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} employeeId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerForEmployee(employeeId: number, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<UserXDTO>> {
            return localVarFp.getCustomerForEmployee(employeeId, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrivers(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<UserXDTO>> {
            return localVarFp.getDrivers(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberOfCustomerForEmployee(employeeId: number, options?: any): AxiosPromise<number> {
            return localVarFp.getNumberOfCustomerForEmployee(employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberOfUserXByRole(role: string, options?: any): AxiosPromise<number> {
            return localVarFp.getNumberOfUserXByRole(role, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserX(id: number, options?: any): AxiosPromise<UserXDTO> {
            return localVarFp.getUserX(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserXByLogin(login: string, options?: any): AxiosPromise<UserXDTO> {
            return localVarFp.getUserXByLogin(login, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} role 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserXByRole(role: string, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<UserXDTO>> {
            return localVarFp.getUserXByRole(role, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UserXDTO} userXDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateUserX(id: number, userXDTO: UserXDTO, options?: any): AxiosPromise<UserXDTO> {
            return localVarFp.partialUpdateUserX(id, userXDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} employeeId 
         * @param {string} fullName 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCustomerAssignToEmployeeByFullName(employeeId: number, fullName: string, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<UserXDTO>> {
            return localVarFp.searchCustomerAssignToEmployeeByFullName(employeeId, fullName, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} role 
         * @param {string} fullName 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserXByFullNameAndRole(role: string, fullName: string, page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<UserXDTO>> {
            return localVarFp.searchUserXByFullNameAndRole(role, fullName, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UserXDTO} userXDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserX(id: number, userXDTO: UserXDTO, options?: any): AxiosPromise<UserXDTO> {
            return localVarFp.updateUserX(id, userXDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserXResourceApi - object-oriented interface
 * @export
 * @class UserXResourceApi
 * @extends {BaseAPI}
 */
export class UserXResourceApi extends BaseAPI {
    /**
     * 
     * @param {UserXDTO} userXDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public createUserX(userXDTO: UserXDTO, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).createUserX(userXDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public deleteUserX(id: number, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).deleteUserX(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public getAllUserXES(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).getAllUserXES(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} employeeId 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public getCustomerForEmployee(employeeId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).getCustomerForEmployee(employeeId, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public getDrivers(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).getDrivers(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public getNumberOfCustomerForEmployee(employeeId: number, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).getNumberOfCustomerForEmployee(employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} role 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public getNumberOfUserXByRole(role: string, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).getNumberOfUserXByRole(role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public getUserX(id: number, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).getUserX(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public getUserXByLogin(login: string, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).getUserXByLogin(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} role 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public getUserXByRole(role: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).getUserXByRole(role, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UserXDTO} userXDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public partialUpdateUserX(id: number, userXDTO: UserXDTO, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).partialUpdateUserX(id, userXDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} employeeId 
     * @param {string} fullName 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public searchCustomerAssignToEmployeeByFullName(employeeId: number, fullName: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).searchCustomerAssignToEmployeeByFullName(employeeId, fullName, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} role 
     * @param {string} fullName 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public searchUserXByFullNameAndRole(role: string, fullName: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).searchUserXByFullNameAndRole(role, fullName, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UserXDTO} userXDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserXResourceApi
     */
    public updateUserX(id: number, userXDTO: UserXDTO, options?: RawAxiosRequestConfig) {
        return UserXResourceApiFp(this.configuration).updateUserX(id, userXDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VehicleForbiddenAddressResourceApi - axios parameter creator
 * @export
 */
export const VehicleForbiddenAddressResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VehicleForbiddenAddressDTO} vehicleForbiddenAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVehicleForbiddenAddress: async (vehicleForbiddenAddressDTO: VehicleForbiddenAddressDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleForbiddenAddressDTO' is not null or undefined
            assertParamExists('createVehicleForbiddenAddress', 'vehicleForbiddenAddressDTO', vehicleForbiddenAddressDTO)
            const localVarPath = `/api/vehicle-forbidden-addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vehicleForbiddenAddressDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVehicleForbiddenAddress: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteVehicleForbiddenAddress', 'id', id)
            const localVarPath = `/api/vehicle-forbidden-addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVehicleForbiddenAddresses: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/vehicle-forbidden-addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleForbiddenAddress: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVehicleForbiddenAddress', 'id', id)
            const localVarPath = `/api/vehicle-forbidden-addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {VehicleForbiddenAddressDTO} vehicleForbiddenAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateVehicleForbiddenAddress: async (id: number, vehicleForbiddenAddressDTO: VehicleForbiddenAddressDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateVehicleForbiddenAddress', 'id', id)
            // verify required parameter 'vehicleForbiddenAddressDTO' is not null or undefined
            assertParamExists('partialUpdateVehicleForbiddenAddress', 'vehicleForbiddenAddressDTO', vehicleForbiddenAddressDTO)
            const localVarPath = `/api/vehicle-forbidden-addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vehicleForbiddenAddressDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {VehicleForbiddenAddressDTO} vehicleForbiddenAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVehicleForbiddenAddress: async (id: number, vehicleForbiddenAddressDTO: VehicleForbiddenAddressDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateVehicleForbiddenAddress', 'id', id)
            // verify required parameter 'vehicleForbiddenAddressDTO' is not null or undefined
            assertParamExists('updateVehicleForbiddenAddress', 'vehicleForbiddenAddressDTO', vehicleForbiddenAddressDTO)
            const localVarPath = `/api/vehicle-forbidden-addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vehicleForbiddenAddressDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleForbiddenAddressResourceApi - functional programming interface
 * @export
 */
export const VehicleForbiddenAddressResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleForbiddenAddressResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {VehicleForbiddenAddressDTO} vehicleForbiddenAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVehicleForbiddenAddress(vehicleForbiddenAddressDTO: VehicleForbiddenAddressDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleForbiddenAddressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVehicleForbiddenAddress(vehicleForbiddenAddressDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleForbiddenAddressResourceApi.createVehicleForbiddenAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVehicleForbiddenAddress(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVehicleForbiddenAddress(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleForbiddenAddressResourceApi.deleteVehicleForbiddenAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVehicleForbiddenAddresses(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleForbiddenAddressDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVehicleForbiddenAddresses(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleForbiddenAddressResourceApi.getAllVehicleForbiddenAddresses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVehicleForbiddenAddress(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleForbiddenAddressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVehicleForbiddenAddress(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleForbiddenAddressResourceApi.getVehicleForbiddenAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {VehicleForbiddenAddressDTO} vehicleForbiddenAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateVehicleForbiddenAddress(id: number, vehicleForbiddenAddressDTO: VehicleForbiddenAddressDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleForbiddenAddressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateVehicleForbiddenAddress(id, vehicleForbiddenAddressDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleForbiddenAddressResourceApi.partialUpdateVehicleForbiddenAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {VehicleForbiddenAddressDTO} vehicleForbiddenAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVehicleForbiddenAddress(id: number, vehicleForbiddenAddressDTO: VehicleForbiddenAddressDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleForbiddenAddressDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVehicleForbiddenAddress(id, vehicleForbiddenAddressDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleForbiddenAddressResourceApi.updateVehicleForbiddenAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VehicleForbiddenAddressResourceApi - factory interface
 * @export
 */
export const VehicleForbiddenAddressResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleForbiddenAddressResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {VehicleForbiddenAddressDTO} vehicleForbiddenAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVehicleForbiddenAddress(vehicleForbiddenAddressDTO: VehicleForbiddenAddressDTO, options?: any): AxiosPromise<VehicleForbiddenAddressDTO> {
            return localVarFp.createVehicleForbiddenAddress(vehicleForbiddenAddressDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVehicleForbiddenAddress(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteVehicleForbiddenAddress(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVehicleForbiddenAddresses(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<VehicleForbiddenAddressDTO>> {
            return localVarFp.getAllVehicleForbiddenAddresses(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleForbiddenAddress(id: number, options?: any): AxiosPromise<VehicleForbiddenAddressDTO> {
            return localVarFp.getVehicleForbiddenAddress(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {VehicleForbiddenAddressDTO} vehicleForbiddenAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateVehicleForbiddenAddress(id: number, vehicleForbiddenAddressDTO: VehicleForbiddenAddressDTO, options?: any): AxiosPromise<VehicleForbiddenAddressDTO> {
            return localVarFp.partialUpdateVehicleForbiddenAddress(id, vehicleForbiddenAddressDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {VehicleForbiddenAddressDTO} vehicleForbiddenAddressDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVehicleForbiddenAddress(id: number, vehicleForbiddenAddressDTO: VehicleForbiddenAddressDTO, options?: any): AxiosPromise<VehicleForbiddenAddressDTO> {
            return localVarFp.updateVehicleForbiddenAddress(id, vehicleForbiddenAddressDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VehicleForbiddenAddressResourceApi - object-oriented interface
 * @export
 * @class VehicleForbiddenAddressResourceApi
 * @extends {BaseAPI}
 */
export class VehicleForbiddenAddressResourceApi extends BaseAPI {
    /**
     * 
     * @param {VehicleForbiddenAddressDTO} vehicleForbiddenAddressDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleForbiddenAddressResourceApi
     */
    public createVehicleForbiddenAddress(vehicleForbiddenAddressDTO: VehicleForbiddenAddressDTO, options?: RawAxiosRequestConfig) {
        return VehicleForbiddenAddressResourceApiFp(this.configuration).createVehicleForbiddenAddress(vehicleForbiddenAddressDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleForbiddenAddressResourceApi
     */
    public deleteVehicleForbiddenAddress(id: number, options?: RawAxiosRequestConfig) {
        return VehicleForbiddenAddressResourceApiFp(this.configuration).deleteVehicleForbiddenAddress(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleForbiddenAddressResourceApi
     */
    public getAllVehicleForbiddenAddresses(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return VehicleForbiddenAddressResourceApiFp(this.configuration).getAllVehicleForbiddenAddresses(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleForbiddenAddressResourceApi
     */
    public getVehicleForbiddenAddress(id: number, options?: RawAxiosRequestConfig) {
        return VehicleForbiddenAddressResourceApiFp(this.configuration).getVehicleForbiddenAddress(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {VehicleForbiddenAddressDTO} vehicleForbiddenAddressDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleForbiddenAddressResourceApi
     */
    public partialUpdateVehicleForbiddenAddress(id: number, vehicleForbiddenAddressDTO: VehicleForbiddenAddressDTO, options?: RawAxiosRequestConfig) {
        return VehicleForbiddenAddressResourceApiFp(this.configuration).partialUpdateVehicleForbiddenAddress(id, vehicleForbiddenAddressDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {VehicleForbiddenAddressDTO} vehicleForbiddenAddressDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleForbiddenAddressResourceApi
     */
    public updateVehicleForbiddenAddress(id: number, vehicleForbiddenAddressDTO: VehicleForbiddenAddressDTO, options?: RawAxiosRequestConfig) {
        return VehicleForbiddenAddressResourceApiFp(this.configuration).updateVehicleForbiddenAddress(id, vehicleForbiddenAddressDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VehicleResourceApi - axios parameter creator
 * @export
 */
export const VehicleResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VehicleDTO} vehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVehicle: async (vehicleDTO: VehicleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleDTO' is not null or undefined
            assertParamExists('createVehicle', 'vehicleDTO', vehicleDTO)
            const localVarPath = `/api/vehicles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vehicleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVehicle: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteVehicle', 'id', id)
            const localVarPath = `/api/vehicles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVehicles: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/vehicles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicle: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVehicle', 'id', id)
            const localVarPath = `/api/vehicles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {VehicleDTO} vehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateVehicle: async (id: number, vehicleDTO: VehicleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateVehicle', 'id', id)
            // verify required parameter 'vehicleDTO' is not null or undefined
            assertParamExists('partialUpdateVehicle', 'vehicleDTO', vehicleDTO)
            const localVarPath = `/api/vehicles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vehicleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {VehicleDTO} vehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVehicle: async (id: number, vehicleDTO: VehicleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateVehicle', 'id', id)
            // verify required parameter 'vehicleDTO' is not null or undefined
            assertParamExists('updateVehicle', 'vehicleDTO', vehicleDTO)
            const localVarPath = `/api/vehicles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vehicleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleResourceApi - functional programming interface
 * @export
 */
export const VehicleResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {VehicleDTO} vehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVehicle(vehicleDTO: VehicleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVehicle(vehicleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleResourceApi.createVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVehicle(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVehicle(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleResourceApi.deleteVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVehicles(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVehicles(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleResourceApi.getAllVehicles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVehicle(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVehicle(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleResourceApi.getVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {VehicleDTO} vehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateVehicle(id: number, vehicleDTO: VehicleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateVehicle(id, vehicleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleResourceApi.partialUpdateVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {VehicleDTO} vehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVehicle(id: number, vehicleDTO: VehicleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVehicle(id, vehicleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VehicleResourceApi.updateVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VehicleResourceApi - factory interface
 * @export
 */
export const VehicleResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {VehicleDTO} vehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVehicle(vehicleDTO: VehicleDTO, options?: any): AxiosPromise<VehicleDTO> {
            return localVarFp.createVehicle(vehicleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVehicle(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteVehicle(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVehicles(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<Array<VehicleDTO>> {
            return localVarFp.getAllVehicles(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicle(id: number, options?: any): AxiosPromise<VehicleDTO> {
            return localVarFp.getVehicle(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {VehicleDTO} vehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateVehicle(id: number, vehicleDTO: VehicleDTO, options?: any): AxiosPromise<VehicleDTO> {
            return localVarFp.partialUpdateVehicle(id, vehicleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {VehicleDTO} vehicleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVehicle(id: number, vehicleDTO: VehicleDTO, options?: any): AxiosPromise<VehicleDTO> {
            return localVarFp.updateVehicle(id, vehicleDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VehicleResourceApi - object-oriented interface
 * @export
 * @class VehicleResourceApi
 * @extends {BaseAPI}
 */
export class VehicleResourceApi extends BaseAPI {
    /**
     * 
     * @param {VehicleDTO} vehicleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleResourceApi
     */
    public createVehicle(vehicleDTO: VehicleDTO, options?: RawAxiosRequestConfig) {
        return VehicleResourceApiFp(this.configuration).createVehicle(vehicleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleResourceApi
     */
    public deleteVehicle(id: number, options?: RawAxiosRequestConfig) {
        return VehicleResourceApiFp(this.configuration).deleteVehicle(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleResourceApi
     */
    public getAllVehicles(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return VehicleResourceApiFp(this.configuration).getAllVehicles(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleResourceApi
     */
    public getVehicle(id: number, options?: RawAxiosRequestConfig) {
        return VehicleResourceApiFp(this.configuration).getVehicle(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {VehicleDTO} vehicleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleResourceApi
     */
    public partialUpdateVehicle(id: number, vehicleDTO: VehicleDTO, options?: RawAxiosRequestConfig) {
        return VehicleResourceApiFp(this.configuration).partialUpdateVehicle(id, vehicleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {VehicleDTO} vehicleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleResourceApi
     */
    public updateVehicle(id: number, vehicleDTO: VehicleDTO, options?: RawAxiosRequestConfig) {
        return VehicleResourceApiFp(this.configuration).updateVehicle(id, vehicleDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



